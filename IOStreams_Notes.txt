
A stream is a logical connection from/to a java program to/from a file.
It's like a pipe between java and file used to transer/recieve data.
It is connection based
A stream that allows to send binary data is BinaryStream and stream that allows to send Character data is Character stream.
						
						 Stream
				 ___________|___________
				|						|
		BinaryStream					CharacterStream
	___________|___________ 			___________|___________ 
   |	                   |   		   |	                   |	
InputStream			OutputStream	Reader					Writer


InputStream and Reader -> read()	-> abstract method
OutputStream and Write -> write()	-> abstract method

InputStream extends Object implements Closeable extends AutoCloseable -> try-with-resources
----------------------------------------------------------------------

1. FileInputStream								- read data 1 byte at a time
2. ByteArrayInputStream 						- read complete data in terms of byte array
3. FilterInputStream							- read data based on filtering operation
	|- DataInputStream 	implements DataInput	- read data in primitive sizes ex: int is 4 bytes so we use this to read 4 bytes at a time
	|- BufferedInputStream (or BufferedReader)	- read data very fast
4. ObjectInputStream 	implements ObjectInput	- read data one object at a time
5. SequenceInputStream							- read data from multiple streams one by one at a time
6. PipedInputStream								- read data one pipe at a time
7. StringBufferInputStream

close() method is implemented by all subclasses

In 1.7 version, we can have auto close option using try with resources that is implemented by all subclasses.
java.lang.AutoCloseable is super interface of java.io.Closeable.

OutputStream extends Object implements java.io.Closeable, java.io.Flushable
---------------------------------------------------------------------------

1. FileOutputStream
2. ByteArrayOutputStream
3. FilterOutputStream
	|- DataOutputStream	implements DataOutput
	|- BufferedOutputStream
	|- PrintStream
4. ObjectOutputStream	implements ObjectOutput
5. PipedOutputStream

When the data needs to be dumped from memory to the file, explicit call to flush() method needs to be called.


Methods
-------

InputStream subclass methods -> 9(1.0) + 3(Java 9) = 12
----------------------------

ex: Book reading

1. count no of pages
2. close the book
3. read word by word
4. read statement
5. read some part
6. marking lines
7. reset to the marked line
8. skip some pages

1. int available() 	throws IOException					- returns no of bytes available						- concrete method
2. int read()  			throws IOException				- read byte by byte, integer returned represents that byte	- abstract method implemented in subclasses
														- returns -1 if EOF
						while(fis.read() != -1) //do something
3. int read(byte[] b)  	throws IOException				- read all bytes of byte array passed in and return no of bytes - concrete method
4. int read(byte[] b, int offset, int length)  throws IOException - read some part of file using byte array of file starting with offset of length - concrete method
5. boolean markSupported() 																- concrete method
6. void mark(int readLimit)	- mark this position in order to be able to re-read later 	- concrete method
7. void reset() throws IOException					- reset back to marked position 	- concrete method
8. void skip(long bytes) throws IOException		    									- concrete method
9. void close() throws IOException														- concrete method


OutputStream methods
--------------------

Ex: Writing into brain

1. Write one word at a time
2. Write a statement
3. Write some part
4. flushing data
5. close

1. public abstract void write(int b) throws IOException
2. public void write(byte[] b)  throws IOException 			
3. public void write(byte[] b, int offset, int length)  throws IOException
4. public void flush()  throws IOException
5. public void close()  throws IOException

Constructors
------------

1. FileOutputStream(String fileName) throws FileNotFoundException -> override the data of the file with present output
2. FileOutputStream(File file) ...
3. FileOutputStream(FileDescriptor fd)
4. FileOutputStream(String fileName, boolean append)
5. FileOutputStream(File file, boolean append)

1. FileInputStream(String fileName) throws FileNotFoundException -> override the data of the file with present output
2. FileInputStream(File file) ...
3. FileInputStream(FileDescriptor fd)


Read data from command line using Scanner
Scanner scanner= new Scanner(System.in);	//System.in->InputStream->read from console while default System.out->PrintStream prints to console
scanner.nextLine();


Pipes
-----
Pipes in Java IO provides the ability for two threads running in the same JVM to communicate. 
Therefore pipes can also be sources or destinations of data.
In Java, the communicating parties must be running in the same process, and should be different threads.

Creating Pipes via Java IO
--------------------------

A PipedInputStream should be connected to a PipedOutputStream. 
The data written to the PipedOutputStream by one thread can be read from the connected PipedInputStream by another thread.

		final PipedOutputStream output = new PipedOutputStream();
        final PipedInputStream  input  = new PipedInputStream(output);



System class
------------

System is a final class from the java.lang package. 
It extends Object class.

Among the facilities provided by the System class are 
1. standard input, 
2. standard output, and 
3. error output streams; 

Access to externally defined properties and environment variables; 
A means of loading files and libraries; and 
A utility method for quickly copying a portion of an array. 

out is a class variable of type PrintStream declared in the System class. 
println is a method of the PrintStream class.

3 System streams are static members of the java.lang.System class, and are pre-instantiated at JVM startup

System.in
---------
System.in is an InputStream which is typically connected to keyboard input of console programs. 
System.in is not used as often since data is commonly passed to a command line Java application via command line arguments, or configuration files.

System.out
----------
System.out is a PrintStream. 
System.out normally outputs the data you write to it to the console. 
This is often used from console-only programs like command line tools. 

System.err (Eclipse: RED text)
----------
System.err is a PrintStream. 
System.err works like System.out except it is normally only used to output error texts. 
Some programs (like Eclipse) will show the output to System.err in RED text, to make it more obvious that it is error text.

Exchanging System Streams
-------------------------

To set a new System stream, use one of the methods 
1. System.setIn()
2. System.setOut() 
3. System.setErr()

Ex: 

	OutputStream output = new FileOutputStream("c:\\data\\system.out.txt");
	PrintStream printOut = new PrintStream(output);

	System.setOut(printOut);

Now all data written to System.out should be redirected into the file "c:\\data\\system.out.txt". 
Keep in mind though, that you should make sure to flush System.out and close the file before the JVM shuts down, 
to be sure that all data written to System.out is actually flushed to the file.

Methods
-------

1. static void arraycopy(Object source, int sourceStart, Object Target, int targetStart, int size)
sourceStart - starting index of source array 
targetStart - starting index of target array
size		- no. of elements to copy

2. static String clearProperty(String key): Removes the system property indicated by the specified key.

3. static String getProperty(String key): Gets the system property indicated by the specified key.

4. static String getProperty(String key, String default): Gets the system property indicated by the specified key or 
														return default value in case of key not found

5. static String setProperty(String key, String value): Sets the system property indicated by the specified key.

6. static Console console(): Returns the unique Console object associated with the current Java virtual machine, if any.
								Console c = System.console(); c.printf("Print Something..."); c.flush(); 

7. static long currentTimeMillis()

8. static void exit(int status): Terminates the currently running Java Virtual Machine.
									a nonzero status code indicates abnormal termination.
										The call System.exit(n) is effectively equivalent to the call: Runtime.getRuntime().exit(n)
										
9. static void gc(): Runs the garbage collector. 
					Calling the gc method suggests that the Java Virtual Machine expend effort toward recycling 
					unused objects in order to make the memory they currently occupy available for quick reuse. 
					When control returns from the method call, the Java Virtual Machine has made a best effort 
					to reclaim space from all discarded objects.									

10. static Map getenv()
	static String getenv(String name) - Environment variables like PATH variable
										Environment variables are specified at the OS level
	
11. static Properties getProperties():
	static String getProperty() - gets a Java property. 
			Java properties are specified by passing the -D option to the JVM (and can be set programmatically).

12. static void runFinalization(): Runs the finalization methods of any objects pending finalization. 
		suggests that the Java Virtual Machine expend effort toward running the finalize methods 
		of objects that have been found to be discarded but whose finalize methods have not yet been run. 
		When control returns from the method call, the Java Virtual Machine has made a best effort to complete all outstanding finalizations.

13. Syntax: public static String lineSeparator()
	Returns: On UNIX systems, it returns "\n";
			 On Microsoft Windows systems it returns "\r\n".
	Exception: NA







































































