JavaScript is always synchronous and single-threaded. If you're executing a JavaScript block of code on a page then no other JavaScript on that page will currently be executed.

JavaScript is only asynchronous in the sense that it can make, for example, Ajax calls. The Ajax call will stop executing and other code will be able to execute until the call returns (successfully or otherwise), at which point the callback will run synchronously. No other code will be running at this point. It wont interrupt any other code that is currently running.

JavaScript timers operate with this same kind of callback.

Describing JavaScript as asynchronous is perhaps misleading. It's more accurate to say that JavaScript is synchronous and single-threaded with various callback mechanisms.

jQuery has an option on Ajax calls to make them synchronously (with the async: false option). Beginners might be tempted to use this incorrectly because it allows a more traditional programming model that one might be more used to. The reason it's problematic is that this option will block all JavaScript on the page until it finishes, including all event handlers and timers.

Just like the execution stack there is the Event Queue. When we want to be notified about some event in the JavaScript engine we can listen to that event, and that event is placed on the queue. For example an Ajax request event, or HTTP request event.

ReactiveX is an API for asynchronous data with observable streams

Pull versus Push systems
----------------

Pull and Push are two different protocols that describe how a data Producer can communicate with a data Consumer.

Pull
----
The Consumer determines when it receives data from the data Producer. 
The Producer itself is unaware of when the data will be delivered to the Consumer.

ex: JavaScript Function
The function is a Producer of data, and the code that calls the function is consuming it by "pulling" out a single return value from its call.


Push
----
The Producer determines when to send data to the Consumer. The Consumer is unaware of when it will receive that data.

ex: Promises, Observables

		PRODUCER								CONSUMER
Pull	Passive: produces data when requested.	Active: decides when data is requested.
Push	Active: produces data at its own pace.	Passive: reacts to received data.

1. A Promise (the Producer) delivers a resolved value to registered callbacks (the Consumers), but unlike functions, 
	it is the Promise which is in charge of determining precisely when that value is "pushed" to the callbacks.
2. An Observable is a Producer of multiple values, "pushing" them to Observers (Consumers). 
	An Observable is a lazily evaluated computation that can synchronously or asynchronously 
		return zero to (potentially) infinite values from the time it's invoked onwards.
	
Observable
-----------
is a asynchronous stream of data that we can subscribe to.
is just a wrapper around a stream of asynchronous data.
works like arrays.
Observables are like functions with zero arguments, but generalize those to allow multiple values.
Subscribing to an Observable is analogous to calling a Function.
Observables are able to deliver values either synchronously or asynchronously.

Conclusion:
-----------
func.call() means "give me one value synchronously"
observable.subscribe() means "give me any amount of values, either synchronously or asynchronously"

Observable vs Promise
---------------------
1. we use .subscribe(next, error, complete) - we use .then(resolve,reject)
2. Emits Multiple values over a period of time - Emits a Single value
   
3. Lazy, is not called until we subscribe to it - Not Lazy
2. Cancellable using unsubscribe - 		Not cancellable
3. Can be manipulated with map, filter and reduce - cannot be

					subscribe
Observer		-----------------> 	Observable

1.next()		-> called by Observable when a new value is emitted
2.catch()		-> called by Observable when there is error
3.complete()	-> called by Observable when there will be no more values arriving in the future

These functions are on the observer and it will be called by observable.

Rx.Observable.fromEvent('button','click')
.subscribe(data=> {//next fn},
error => {//catch fn},
()=> {//complete fn});

OR

var observer= {
	next: function(value) {
		console.log(value);
	},
	error: function(error) {
		console.log(error);
	},
	complete: function(){
		console.log('completed');
	}
}

Rx.Observable.fromEvent('button','click')
.subscribe(observer);

-----------------------------------------------

Creating an observable
----------------------

Rx.Observable.create(function(obs) {
	obs.next('A value');
	obs.next('Another value');
	obs.error('An error');
	obs.complete();
	obs.next('This value will NOT be emitted');
}).subscribe(observer);

Asynchronous code
-------------------

Rx.Observable.create(function(obs) {
	obs.next('A value');
	obs.next('Another value');
	obs.error('An error');
	setTimeout(function(){
		obs.complete();
	},2000);
	obs.next('This value will NOW be emitted');
}).subscribe(observer);
	

Creating observable on a button
-------------------------------

var subscription= Rx.Observable.create(function(obs){
	
	button.onClick= function(event) {
		obs.next(event);
	}
}).subscribe(observer);

To avoid memory leaks, when we are done with the observable

subscription.unsubscribe();


Rx.Observable.of(1, 2, 3)	-> creates an observable that will emit 1, 2, and 3, one right after another

--------------------------------------------

Retry on error
--------------
1. retry(time in ms)

_http.get(_url)
.retry(3)		-> 3 times -> no arg retries infinite times
.subscribe(observer);

_http.get(_url)
.retry(3)		-> 3 times -> no arg retries infinite times
.subscribe(observer);

2. retryWhen - Delay and Scan
Delay- retry after some time in ms
Scan - limit the no of attempts

------------------------------------------------

RxJS Operators
--------------

Pipe
----
observableInstance.pipe(operator()); operator -> filter(), mergeMap()

A Pipeable Operator
-------------------

It is a function that takes an Observable as its input and returns another Observable. 
It is a pure operation: the previous Observable stays unmodified. 
Subscribing to the output Observable will also subscribe to the input Observable.

Creation Operators are the other kind of operator, which can be called as standalone functions to create a new Observable.

Syntax: op()(obs)
------
For example: 

1. of(1, 2, 3) creates an observable that will emit 1, 2, and 3, one right after another.

2. map(x => x*x)(of(1, 2, 3)).subscribe(v => console.log(v));					-> is same as [1,2,3].map(x => x * x)

3. first()(of(1,2,3)).subscribe(v => console.log(v));

Drawback of using this syntax is it becomes unreadable if there are many operators on an observable.

op1()(op2()(op3()(op4()(op5()(obs)))))

To avoid this we can use the pipe function on the observable to make more readable

obs.pipe(op1, op2, op3, op4, op5)


Creation Operators
------------------
functions that can be used to create an Observable with some common predefined behavior or by joining other Observables.

const observable= interval(1000); -> creates an observable that emits a value every second

Higher-order Observables
------------------------

Observable of observables is higher order observable.

But how do you work with a higher-order Observable ? 
Typically, by flattening: by (somehow) converting a higher-order Observable into an ordinary Observable. For example:

const fileObservable = urlObservable.pipe(		-> for every url emitted this will be called
   map(url => http.get(url)),					-> get method returns another observable so this becomes Observable of observables
   concatAll(),									-> flattening operator
);

Flattening/ join operators
--------------------------

1. concatAll() — subscribes to each inner observable that comes out of the outer observable and 
				 copies all the values until that observable completes and then moves on to the next one.
				 Finally concatenates all the values and emits them.
				 
2. mergeAll()  — subscribes to each inner Observable as it arrives, then emits each value as it arrives

3. switchAll() — subscribes to the first observable and then when a next inner observable arrives, then unsubscribes the previous one
				 and subscribes to the new one
				 
4. exhaust()   — subscribes to the first inner Observable when it arrives, and emits each value as it arrives, discarding all newly arriving inner Observables until 				 that first one completes, then waits for the next inner Observable.				 

Just as many array library combine map() and flat() (or flatten()) into a single flatMap(), there are mapping equivalents of all the RxJS flattening operators concatMap(), mergeMap(), switchMap(), and exhaustMap().

----------------------

1. ajax - for ajax calls 
Using ajax() to fetch the response object that is being returned from API.

const obs$ = ajax(`https://api.github.com/users?per_page=5`).pipe(
  map(userResponse => console.log('users: ', userResponse)),
  catchError(error => {
    console.log('error: ', error);
    return of(error);
  })
);

Using ajax.getJSON() to fetch data from API.
Using ajax() with object as argument and method POST with a two seconds delay.

const users = ajax({
  url: 'https://httpbin.org/delay/2',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'rxjs-custom-header': 'Rxjs'
  },
  body: {
    rxjs: 'Hello World!'
  }
}).pipe(
  map(response => console.log('response: ', response)),
  catchError(error => {
    console.log('error: ', error);
    return of(error);
  })
);

2. 
























