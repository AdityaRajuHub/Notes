Generics in Java is similar to templates in C++. The idea is to allow type (Integer, String, … etc and user defined types) to be a parameter to methods, classes and interfaces. For example, classes like HashSet, ArrayList, HashMap, etc use generics very well. We can use them for any type.

 

Generic Class

Like C++, we use <> to specify parameter types in generic class creation. To create objects of generic class, we use following syntax.
// To create an instance of generic class 
BaseType <Type> obj = new BaseType <Type>()

Note: In Parameter type we can not use primitives like 
      'int','char' or 'double'.
	  

// A Simple Java program to show working of user defined 
// Generic classes 
   
// We use < > to specify Parameter type 
class Test<T> 
{ 
    // An object of type T is declared 
    T obj; 
    Test(T obj) {  this.obj = obj;  }  // constructor 
    public T getObject()  { return this.obj; } 
} 
   
// Driver class to test above 
class Main 
{ 
    public static void main (String[] args) 
    { 
        // instance of Integer type 
        Test <Integer> iObj = new Test<Integer>(15); 
        System.out.println(iObj.getObject()); 
   
        // instance of String type 
        Test <String> sObj = 
                          new Test<String>("GeeksForGeeks"); 
        System.out.println(sObj.getObject()); 
    } 
}	  

Type Parameters
---------------
The type parameters naming conventions are important to learn generics thoroughly. The commonly type parameters are as follows:

T - Type
E - Element
K - Key
N - Number
V - Value

Wildcard in Java Generics
-------------------------
The ? (question mark) symbol represents wildcard element which means ANY TYPE.

1. If we write <? extends Number> -> ? is child class of Number 
e.g. Integer, Float, double etc. Now we can call the method of Number class through any child class object.

2. If we write <? super Integer> -> ? is super class of Integer
e.g. Integer, Number, Object are supported.

Note: List<? extends Number> does NOT mean "list of objects of different types, all of which extend Number". 
		It means "list of objects of a single type which extends Number".

extends
--------
The wildcard declaration of List<? extends Number> foo3 means that any of these are legal assignments:

List<? extends Number> foo3 = new ArrayList<Number>();  // Number "extends" Number (in this context)
List<? extends Number> foo3 = new ArrayList<Integer>(); // Integer extends Number
List<? extends Number> foo3 = new ArrayList<Double>();  // Double extends Number
Reading - Given the above possible assignments, what type of object are you guaranteed to read from List foo3:

You can read a Number because any of the lists that could be assigned to foo3 contain a Number or a subclass of Number.
You can't read an Integer because foo3 could be pointing at a List<Double>.
You can't read a Double because foo3 could be pointing at a List<Integer>.
Writing - Given the above possible assignments, what type of object could you add to List foo3 that would be legal for all the above possible ArrayList assignments:

You can't add an Integer because foo3 could be pointing at a List<Double>.
You can't add a Double because foo3 could be pointing at a List<Integer>.
You can't add a Number because foo3 could be pointing at a List<Integer>.
You can't add any object to List<? extends T> because you can't guarantee what kind of List it is really pointing to, so you can't guarantee that the object is allowed in that List. The only "guarantee" is that you can only read from it and you'll get a T or subclass of  T.

super
-----
Now consider List <? super T>.

The wildcard declaration of List<? super Integer> foo3 means that any of these are legal assignments:

List<? super Integer> foo3 = new ArrayList<Integer>();  // Integer is a "superclass" of Integer (in this context)
List<? super Integer> foo3 = new ArrayList<Number>();   // Number is a superclass of Integer
List<? super Integer> foo3 = new ArrayList<Object>();   // Object is a superclass of Integer

Reading - Given the above possible assignments, what type of object are you guaranteed to receive when you read from List foo3:

	You aren't guaranteed an Integer because foo3 could be pointing at a List<Number> or List<Object>.
	You aren't guaranteed a Number because foo3 could be pointing at a List<Object>.
	The only guarantee is that you will get an instance of an Object or subclass of Object (but you don't know what subclass).

Writing - Given the above possible assignments, what type of object could you add to List foo3 that would be legal for all the above possible ArrayList assignments:

	You can add an Integer because an Integer is allowed in any of above lists.
	You can add an instance of a subclass of Integer because an instance of a subclass of Integer is allowed in any of the above lists.
	You can't add a Double because foo3 could be pointing at an ArrayList<Integer>.
	You can't add a Number because foo3 could be pointing at an ArrayList<Integer>.
	You can't add an Object because foo3 could be pointing at an ArrayList<Integer>.

PECS
---------------------------
Remember PECS: "Producer Extends, Consumer Super".

"Producer Extends" - If you need a List to produce T values (you want to read Ts from the list), you need to declare it with ? extends T, e.g. List<? extends Integer>. But you cannot add to this list.

"Consumer Super" - If you need a List to consume T values (you want to write Ts into the list), you need to declare it with ? super T, e.g. List<? super Integer>. But there are no guarantees what type of object you may read from this list.

If you need to both read from and write to a list, you need to declare it exactly with no wildcards, e.g. List<Integer>.

Example
-------
Note this example from the Java Generics FAQ. Note how the source list src (the producing list) uses extends, and the destination list dest (the consuming list) uses super:

public class Collections { 
  public static <T> void copy(List<? super T> dest, List<? extends T> src) {
      for (int i = 0; i < src.size(); i++) 
        dest.set(i, src.get(i)); 
  } 
}

Generic Functions:
-----------------
We can also write generic functions that can be called with different types of arguments based on the type of arguments passed to generic method, the compiler handles each method.

// A Simple Java program to show working of user defined 
// Generic functions 
   
class Test 
{ 
    // A Generic method example 
    static <T> void genericDisplay (T element) 
    { 
        System.out.println(element.getClass().getName() + 
                           " = " + element); 
    } 
   
    // Driver method 
    public static void main(String[] args) 
    { 
         // Calling generic method with Integer argument 
        genericDisplay(11); 
   
        // Calling generic method with String argument 
        genericDisplay("GeeksForGeeks"); 
   
        // Calling generic method with double argument 
        genericDisplay(1.0); 
    } 
}



Advantages
----------

1. Code Reuse: We can write a method/class/interface once and use for any type we want.

2. Type Safety : Generics make errors to appear compile time than at run time 
(It’s always better to know problems in your code at compile time rather than making your code fail at run time). 

3. Individual Type Casting is not needed: If we do not use generics, then, 
	every-time we retrieve data from ArrayList, we have to typecast it.
	
4. Implementing generic algorithms: By using generics, we can implement algorithms that work on 
	different types of objects and at the same they are type safe too.






















































