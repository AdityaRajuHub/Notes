3 core pieces

Observable
Computed - calculated property
Observable array - collections

How observables works

changes to source notify targets
changes to target notify source
Two-way data binding
Event binding

Unwrap observables

var a = ko.observable('Name')
a -> function definition
a('someOtherName') -> assign value to a
a() -> someOtherName
a= 'anotherName' -> change the variable to string

In the htm data-bind, the rightmost property need not have paranthesis
ex: data-bind="attr: {src: speaker().imagePath}"

Computed observables

Define ur own derived value
based on other properties and observables
also supports data binding

observable array is declared as var obsArr= ko.observableArray([some comma separated objects]);
obs array is property of an object say obj
ko.applyBindings(obj);

HTML
----
data-bind="foreach: obsArr"
properties inside foreach
1. $index() -> index of the current iteration
2. $parent: This is the view model object in the parent context, the one immeditely outside the current context.

$parents will give an array with $parents[0] being the immediate outer context while
$parent[1] being its grandparent...

3. $root: This is the main view model object in the root context, i.e., the topmost parent context. It’s usually the object that was passed to ko.applyBindings. It is equivalent to $parents[$parents.length - 1].

4. $data: This is the view model object in the current context. In the root context, $data and $root are equivalent.

var Person = function(name) {
  var self = this;
  self.name = ko.observable(name);
  self.children = ko.observableArray([]);
}
  
var ViewModel = function() {
  var self = this;
  self.name = 'root view model';
  self.mainPerson = ko.observable();
}

var vm = new ViewModel(),
    grandpa = new Person('grandpa'),
    daddy = new Person('daddy'),
    son1 = new Person('marc'),
    son2 = new Person('john');

vm.mainPerson(grandpa);
grandpa.children.push(daddy);
daddy.children.push(son1);
daddy.children.push(son2);

ko.applyBindings(vm);



-------------------------------

If you want to pass some parameters to click function (as it’s done in delete binding), the first parameter always must be a variable, which can be named as this in the bound function. The second bound parameter will be the first argument, passed to the function. To be more clear, look at the deleteItem() function example:

<button data-bind="click: $root.deleteItem.bind($data,$index())

//in the parentmodel
self.deleteItem= function(index){					
	self.items().vmItemArr.splice(index,1);
};

---------------------------------


Pure computed observables
If your computed observable simply calculates and returns a value based on some observable dependencies, then it’s better to declare it as a ko.pureComputed instead of a ko.computed. For example:

this.fullName = ko.pureComputed(function() {
    return this.firstName() + " " + this.lastName();
}, this);
Since this computed is declared to be pure (i.e., its evaluator does not directly modify other objects or state), Knockout can more efficiently manage its re-evaluation and memory use. Knockout will automatically suspend or release it if no other code has an active dependency on it.

-------------------------------------

The "class" and "css" bindings

<div data-bind="class: profitStatus">
   Profit Information
</div>

This will apply the CSS class profitPositive when the currentProfit value is positive; otherwise it will apply the profitWarning CSS class.

“css” binding example
<div data-bind="css: { profitWarning: currentProfit() < 0 }">
   Profit Information
</div>
 This will apply the CSS class profitWarning whenever the currentProfit value dips below zero, and remove that class whenever it goes above zero.

Using the “class” and “css” bindings at the same time
As long as they reference different CSS class names, you can include both class and css bindings on the same element. Thus you can have some classes that are set based on a true/false value and others that are calculated dynamically. For example:

<div data-bind="css: { highlight: isSelected }, class: profitStatus">...</div>
Note: Applying CSS classes whose names aren’t legal JavaScript variable names
If you want to apply the CSS class my-class, you can’t write this:

<div data-bind="css: { my-class: someValue }">...</div>
… because my-class isn’t a legal identifier name at that point. The solution is simple: just wrap the identifier name in quotes so that it becomes a string literal, which is legal in a JavaScript object literal. For example,

<div data-bind="css: { 'my-class': someValue }">...</div>

-------------------------------

