
Spring Security works based on filters. A filter is the one which intercepts a request before the servlet/service handles the request. 
One such filter of spring that we configure in web.xml is DelatingFilterProxy which is just a main filter which delegates to multiple other filter under it.

<filter>
<filter-name>springSecurityFilterChain</filter-name>
<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
</filter>

<filter-mapping>
<filter-name>springSecurityFilterChain</filter-name>
<url-pattern>/*</url-pattern>
</filter-mapping>

This is the default configuration in Spring boot when we add spring-security-starter dependency.
This delegating filter delegates to multiple other filters one such filter is Authentication related filter.

Authentication is a data tranfer object which holds the user's credentials before authentication and then sends this to something called AuthenticationProvider.
public interface Authentication
extends Principal, Serializable
Represents the token for an authentication request or for an authenticated principal once the request has been processed by the AuthenticationManager.authenticate(Authentication) method.
Once the request has been authenticated, the Authentication will usually be stored in a thread-local SecurityContext managed by the SecurityContextHolder by the authentication mechanism which is being used. 
An explicit authentication can be achieved, without using one of Spring Security's authentication mechanisms, by creating an Authentication instance and using the code:

 SecurityContextHolder.getContext().setAuthentication(anAuthentication);
 
 Methods supported 
 ----------------
 Collection<? extends GrantedAuthority>	getAuthorities()
Set by an AuthenticationManager to indicate the authorities that the principal has been granted.

Object	getCredentials()
The credentials that prove the principal is correct.

Object	getDetails()
Stores additional details about the authentication request.

Object	getPrincipal()
The identity of the principal being authenticated.

boolean	isAuthenticated()
Used to indicate to AbstractSecurityInterceptor whether it should present the authentication token to the AuthenticationManager.

void	setAuthenticated(boolean isAuthenticated)
See isAuthenticated() for a full description.


There can be multiple AuthenticationProviders depending on how you want to authenticate. ex: InMemory based, Dao based, OAuth based, JWT based etc

AuthenticationProvider
----------------------
public interface AuthenticationProvider
Indicates a class can process a specific Authentication implementation.
Method Summary
-------------
All MethodsInstance MethodsAbstract Methods
Modifier and Type	Method and Description

Authentication	authenticate(Authentication authentication)
Performs authentication with the same contract as AuthenticationManager.authenticate(Authentication) .

boolean	supports(Class<?> authentication)
Returns true if this AuthenticationProvider supports the indicated Authentication object.

So in order to decide which Authentication Provider to call, there is a AuthenticationManager which is responsible for selecting the right provider by calling the supports(?) method on the provider to check if it supports the kind of authentication requested.

After authentication the provider returns same Authentication object back to authentication manager but adding the Principal object which contains the userDetails object loaded from data store..
The authentication manager returns this Auth object back to the filter which stores Authentication object in SecurityContext.
There is another filter which is responsible for reading this SecurityContext and verifies whether the user's session is still valid.

@Component
public class KioskDriverHttpAuthenticationProvider implements AuthenticationProvider {
    
    @Inject
    private AccountPropRepository accountPropRepository;
    
    private static final Logger logger = LoggerFactory.getLogger(KioskDriverHttpAuthenticationProvider.class);
    
    private static final GrantedAuthority READ = new SimpleGrantedAuthority("READ");
    private static final GrantedAuthority UPDATE = new SimpleGrantedAuthority("UPDATE");
    private static final Set<GrantedAuthority> KIOSK_DRIVER_AUTHORITIES = ImmutableSet.of(READ, UPDATE);
    
    @Transactional(readOnly = true)
    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        
        PeopleView authorizedDriver = getDriverFromAuthentication(authentication);
        
        Collection<? extends GrantedAuthority> authorities = buildUserFromKioskDriverEntity(authorizedDriver).getAuthorities();
        Authentication authenticationAndAuthorities = new UsernamePasswordAuthenticationToken(authorizedDriver, authentication.getCredentials(), authorities);
        
        SecurityContextHolder.getContext().setAuthentication(authenticationAndAuthorities);
        
//        System.out.println("authenticationAndAuthorities: " + authenticationAndAuthorities);
        return authenticationAndAuthorities;
    }
    
    @PersistenceContext
    private EntityManager entityManager;

    public PeopleView getDriverFromAuthentication(Authentication authentication) {
        
        logger.debug("authentication principal: {} ceredentials: {}" + authentication.getPrincipal(), authentication.getCredentials());
        
        String p = authentication.getPrincipal().toString();

        boolean usingPin = (p.startsWith("~") && p.endsWith("~~"));
        
        
        final String[] credentials = ((String) authentication.getCredentials()).split("-");
        
        if (credentials.length < 2) {
        	throw new AccessDeniedException("{\"errMessage\":\"Account Code, and Employee ID are required");
        }
        
        final String accountCode = credentials[0].toString();
        final String empId = credentials[1].toString();
       
        if (usingPin) {		
        	final String driverPin = p.substring(1,p.indexOf("~~"));	// PIN is stored in the format ~#####~~  inside the principal
        	logger.debug("KioskDriverHttpAuthentication: getDriverFromAuthentication() with PIN: " + driverPin + ", empid: " + empId + ", UTCtimestamp: " + getUTCDateNow());
        	
        	return getKioskDriverInfoUsingPin(accountCode,driverPin,empId);
        	
        } else {	// We are using accountCode-employeeID format in password field
        	
        	final String last = authentication.getName();
            logger.debug("KioskDriverHttpAuthentication: getDriverFromAuthentication() with accountCode: " + accountCode + ", empid: " + empId + ", last: " + last + ", UTCtimestamp: " + getUTCDateNow());
            checkKioskDriverLoginParameters(accountCode, last, empId);
            
            return getKioskDriverInfo(accountCode, last, empId);
        }
    }
    
    public PeopleView getKioskDriverInfoUsingPin(final String accountCode, final String driverPin, final String empid) {
    	List<AccountProp> accountProp = accountPropRepository.findByNameAndValue("accountCode", accountCode);
        if (accountProp.isEmpty()) {
            throw new AccessDeniedException("{\"errMessage\":\"Account Code: " + accountCode + " does not exist. Please check the case-sensitive spelling and try again.\"}");
        }
            
        final List<PeopleView> peopleView = getPeopleViewByEmpIdAcctIDAndDriverPin(accountProp.get(0).getAcctID(), empid, driverPin);
     
        if (peopleView.isEmpty()) {
            throw new AccessDeniedException(
                            "{\"errMessage\":\"Employee/Driver ID: " + empid + ", acct: " + accountCode + ", pin: " + driverPin + " does not exist. Please check the case-sensitive spelling and try again.\"}");
        }
                            
        return peopleView.get(0);
    }
    
    public PeopleView getKioskDriverInfo(final String accountCode, final String last, final String empid) {
        List<AccountProp> accountProp = accountPropRepository.findByNameAndValue("accountCode", accountCode);
        if (accountProp.isEmpty())
            throw new AccessDeniedException("{\"errMessage\":\"Account Code: " + accountCode + " does not exist. Please check the case-sensitive spelling and try again.\"}");
            
        final List<PeopleView> peopleView = getPeopleViewByAcctIdAndEmpidAndLast(accountProp.get(0).getAcctID(), empid, last);
        if (peopleView.isEmpty())
            throw new AccessDeniedException(
                            "{\"errMessage\":\"Employee/Driver ID: " + empid + ", last name: " + last + " does not exist. Please check the case-sensitive spelling and try again.\"}");
                            
        return peopleView.get(0);
    }
    
    public List<PeopleView> getPeopleViewByAcctIdAndEmpidAndLast(Integer acctID, String empid, String last) {
        return entityManager.createNamedQuery("getPeopleViewByAcctIDAndEmpidAndLast", PeopleView.class)
                        .setParameter("accountID", acctID)
                        .setParameter("empid", empid)
                        .setParameter("last", last)
                        .setParameter("status", ACTIVE).getResultList();
    }
    
    public List<PeopleView> getPeopleViewByEmpIdAcctIDAndDriverPin(Integer acctID, String empid, String driverPin) {
    	return entityManager.createNamedQuery("getPeopleViewByEmpIdAcctIDAndDriverPinQuery", PeopleView.class)
    			.setParameter("accountID", acctID)
                .setParameter("empid", empid)
                .setParameter("driverPin", driverPin)
                .setParameter("status", ACTIVE).getResultList();
    }
    
    public void checkKioskDriverLoginParameters(String accountCode, String last, String empid) {
        if (isNullOrEmpty(accountCode) || isNullOrEmpty(last) || isNullOrEmpty(empid))
            throw new AccessDeniedException("{\"errMessage\":\"Account Code, Employee/Driver ID and last name are required");
    }
    
    public UserDetails buildUserFromKioskDriverEntity(PeopleView authorizedDriver) {
        
        final User inthincKioskDriver = new User(
                        authorizedDriver.getDriverID().toString(),
                        authorizedDriver.getPersonID().toString(),
                        true,
                        true,
                        true,
                        true,
                        buildGrantedAuthorities(authorizedDriver));
                        
        return inthincKioskDriver;
    }
    
    private Collection<? extends GrantedAuthority> buildGrantedAuthorities(PeopleView authorizedDriver) {
        return KIOSK_DRIVER_AUTHORITIES;
    }
    
    public PeopleView getAuthKioskDriver() {
 //       System.out.println("SecurityContextHolder.getContext().getAuthentication().getPrincipal(): " + SecurityContextHolder.getContext().getAuthentication().getPrincipal());
        return (PeopleView) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    }
    
    public Integer getAuthKioskDriverID() {
        return getAuthKioskDriver().getDriverID();
    }
    
    public String getKioskDriverNameAndPersonID(){
        PeopleView authDriver = getAuthKioskDriver();
        return " [" + authDriver.getFirst() + " " + authDriver.getLast() + " (personID:" + authDriver.getPersonID() + ")]";
    }
    
    @Override
    public boolean supports(Class<?> authentication) {
        return true;
    }
    
    public boolean isAuthenticated() {
    	if(SecurityContextHolder.getContext().getAuthentication().getPrincipal() instanceof PeopleView) {
    		return true;
    	} else {
    		return false;
    	}
    }
    
}

DelegatingPasswordEncoder is the default password encoder
-------------------------
public class DelegatingPasswordEncoder
extends java.lang.Object
implements PasswordEncoder
A password encoder that delegates to another PasswordEncoder based upon a prefixed identifier.
Constructing an instance
You can easily construct an instance using PasswordEncoderFactories. Alternatively, you may create your own custom instance. For example:
 String idForEncode = "bcrypt";
 Map encoders = new HashMap<>();
 encoders.put(idForEncode, new BCryptPasswordEncoder());
 encoders.put("noop", NoOpPasswordEncoder.getInstance());
 encoders.put("pbkdf2", new Pbkdf2PasswordEncoder());
 encoders.put("scrypt", new SCryptPasswordEncoder());
 encoders.put("sha256", new StandardPasswordEncoder());

 PasswordEncoder passwordEncoder = new DelegatingPasswordEncoder(idForEncode, encoders);
 
Password Storage Format
The general format for a password is:
 {id}encodedPassword
 
Such that "id" is an identifier used to look up which PasswordEncoder should be used and "encodedPassword" is the original encoded password for the selected PasswordEncoder. The "id" must be at the beginning of the password, start with "{" and end with "}". If the "id" cannot be found, the "id" will be null. For example, the following might be a list of passwords encoded using different "id". All of the original passwords are "password".
 {bcrypt}$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG
 {noop}password
 {pbkdf2}5d923b44a6d129f3ddf3e3c8d29412723dcbde72445e8ef6bf3b508fbf17fa4ed4d6b99ca763d8dc
 {scrypt}$e0801$8bWJaSu2IKSn9Z9kM+TPXfOc/9bdYSrN1oD9qfVThWEwdRTnO7re7Ei+fUZRJ68k9lTyuTeUp4of4g24hHnazw==$OAOec05+bXxvuu/1qZ6NUR+xQYvYv7BeL1QxwRpY5Pc=
 {sha256}97cde38028ad898ebc02e690819fa220e88c62e0699403e94fff291cfffaf8410849f27605abcbc0
 
For the DelegatingPasswordEncoder that we constructed above:
The first password would have a PasswordEncoder id of "bcrypt" and encodedPassword of "$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG". When matching it would delegate to BCryptPasswordEncoder
The second password would have a PasswordEncoder id of "noop" and encodedPassword of "password". When matching it would delegate to NoOpPasswordEncoder
The third password would have a PasswordEncoder id of "pbkdf2" and encodedPassword of "5d923b44a6d129f3ddf3e3c8d29412723dcbde72445e8ef6bf3b508fbf17fa4ed4d6b99ca763d8dc". When matching it would delegate to Pbkdf2PasswordEncoder
The fourth password would have a PasswordEncoder id of "scrypt" and encodedPassword of "$e0801$8bWJaSu2IKSn9Z9kM+TPXfOc/9bdYSrN1oD9qfVThWEwdRTnO7re7Ei+fUZRJ68k9lTyuTeUp4of4g24hHnazw==$OAOec05+bXxvuu/1qZ6NUR+xQYvYv7BeL1QxwRpY5Pc=" When matching it would delegate to SCryptPasswordEncoder
The final password would have a PasswordEncoder id of "sha256" and encodedPassword of "97cde38028ad898ebc02e690819fa220e88c62e0699403e94fff291cfffaf8410849f27605abcbc0". When matching it would delegate to StandardPasswordEncoder
Password Encoding
The idForEncode passed into the constructor determines which PasswordEncoder will be used for encoding passwords. In the DelegatingPasswordEncoder we constructed above, that means that the result of encoding "password" would be delegated to BCryptPasswordEncoder and be prefixed with "{bcrypt}". The end result would look like:
 {bcrypt}$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG
 
Password Matching
Matching is done based upon the "id" and the mapping of the "id" to the PasswordEncoder provided in the constructor. Our example in "Password Storage Format" provides a working example of how this is done. By default the result of invoking matches(CharSequence, String) with a password with an "id" that is not mapped (including a null id) will result in an IllegalArgumentException. This behavior can be customized using setDefaultPasswordEncoderForMatches(PasswordEncoder).
