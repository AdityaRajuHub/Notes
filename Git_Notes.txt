Git is a distributed version control system.

Generally any VCS operates in a intranet meaning in one network and anyone on that network having access to that server can use it.
But what if the person working offline wants to check in changes. This is where Git comes into picture.
Also if the code is on one central server repository then it means that there is a single point of failure.

Git is distributed meaning we have a Remote repository that everyone has access to and a local repository.
Every developer has a copy of the repository in his local machine.

-------------------------------------------------------


Working Area		Staging Area		.git directory (Repository)
					
					Checkout the project
	<------------------------------------------
		Stage fixes
	-------------------->
								Commit
						---------------------->		
					
1. When there are a group of related files add at once to staging					
-------------------------------------------------------

> git init 
	If we run this command in any folder, it places .git file for tracking purposes

> git status
	Provides untracked files

> touch .gitignore 
	creates a file which can contain all the files to be ignored. If we place *.project in this file and run > git status command
	the .project files don't show up

> git add .gitignore

> git add -A	
	Add all files to staging area

> git reset
	Resets back to working area
	
> git commit -m "commit message"

> git clone <url> <where to clone>
	ex: git clone ../remote_repo.git .

> git remote -v
	List all the remote repos
	
> git branch -a
	List all the branches on this machine
	
> git diff
	Lists the differences in working directory to that of repo
	
> git pull origin master
	origin - remote repository
	master - the branch we want to pull from

> git push origin master

Creating a branch
-----------------

> git checkout <branch-name>
	Switch to that branch, Start working on that branch, whatever commands we give operate on this branch

> git branch <branch-name>
	Creates new branch with specified name from the operating branch

> git branch
	List all the branches
	
> git branch --merged
	List all the branches that have been merged with the current operating branch

> git merge <branch-name>
	Merge changes of the branch with the current operating branch
	
Deleting a branch
-----------------

> git branch -d <branch-name>
	Deletes the branch

> git branch -a
	Removed from local,still listed in remote

> git push origin --delete <branch-name>
	
	
	
	
	
	
	