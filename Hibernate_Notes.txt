JNDI 
----
Allows distributed applications to look up services in an abstract, resource-independent way.

The most common use case is to set up a database connection pool on a Java EE application server. Any application that's deployed on that server can gain access to the connections they need using the JNDI name java:comp/env/FooBarPool without having to know the details about the connection.

This has several advantages:
---------------------------
If you have a deployment sequence where apps move from devl->int->test->prod environments, you can use the same JNDI name in each environment and hide the actual database being used. Applications don't have to change as they migrate between environments.
You can minimize the number of folks who need to know the credentials for accessing a production database. Only the Java EE app server needs to know if you use JNDI.

PersistenceContext
------------------

Session API			- Hibernate
EntityManager API	- JPA

represents a context for dealing with persistent data. 
Persistent data has state in relation to both a context and the underlying database.
The above API are responsible for moving entities between states.

1. Transient
2. Persistent (Managed)
3. Detached
4. Removed


What is SessionFactory in Hibernate?
------------------------------------
1. SessionFactory is an interface. 
2. SessionFactory can be created by providing Configuration object, 
	which will contain all DB related property details pulled from either hibernate.cfg.xml file or hibernate.properties file. 
3. SessionFactory is a factory for Session objects.

4. We can create one SessionFactory implementation per database in any application. 
	If your application is referring to multiple databases, then you need to create one SessionFactory per database.

5. The SessionFactory is a heavyweight object; it is usually created during application start up and kept for later use. 
6. The SessionFactory is a thread safe object and used by all the threads of an application.

	Configuration configuration = new Configuration();
	configuration.configure("/j2n-hibernate.cfg.xml");
	configuration.addAnnotatedClass(Employee.class);
	ServiceRegistry srvcReg = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties()).build();
	sessionFactory = configuration.buildSessionFactory(srvcReg);

SessionFactory vs. EntityManagerFactory
---------------------------------------
Prefer EntityManagerFactory and EntityManager. They are defined by the JPA standard.

SessionFactory and Session are hibernate-specific. The EntityManager invokes the hibernate session under the hood. And if you need some specific features that are not available in the EntityManager, you can obtain the session by calling:

Session session = entityManager.unwrap(Session.class);

If you are using the JPA’s standard specification implementation (Read : Introduction to JPA), then you would use EntityManagerFactory for opening the session. But, if you are using the hibernate implementation, you have hibernate specific SessionFactory for managing the sessions. Here there is lot of confusion between developers like which one is the best approach. Here, there is two opinions are popular:

EntityManagerFactory is  the standard implementation, it is the same across all the implementations. If we migrate our ORM for any other provider, there will not be any change in the approach for handling the transaction. In contrast, if you use hibernate’s session factory, it is tied  to hibernate APIs and ca not migrate to new vendor easily.

One dis-advantage of using the standard implementation is that, it is not providing the advanced features. There is not much control provided in the EntityManager APIs. Whereas, hibernate’s SessionFactory has lot of advanced features which can not done in JPA. One such thing is retrieving the ID generator without closing the transaction, batch insert, etc.

Using EntityManagerFactory approach allows us to use callback method annotations like 
@PrePersist, @PostPersist,@PreUpdate with no extra configuration.

--------------------------------------------------------------------------------------

<persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
	version="2.0" xmlns="http://java.sun.com/xml/ns/persistence">
	<persistence-unit name="test" transaction-type="RESOURCE_LOCAL">
		<class>com.example.demo.dto.DemoObj</class>
		<properties>
			<property name="javax.persistence.jdbc.driver" value="org.apache.derby.jdbc.EmbeddedDriver" />
			<property name="javax.persistence.jdbc.url"    value="jdbc:derby:/home/test/databases/simpleDb;create=true" />
			<property name="javax.persistence.jdbc.user" value="username" />
			<property name="javax.persistence.jdbc.password" value="password" />
			<property name="hibernate.dialect" value="org.hibernate.dialect.DerbyDialect"/>
			<property name="show_sql" value="true"/>
			<property name="hibernate.temp.use_jdbc_metadata_defaults" value="false"/>
		</properties>
	</persistence-unit>
</persistence>


The standard Hibernate property values are: create, update, create-drop, validate and none:

create – Hibernate first drops existing tables, then creates new tables
update – the object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no more required by the application
create-drop – similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing
validate – Hibernate only validates whether the tables and columns exist, otherwise it throws an exception
none – this value effectively turns off the DDL generation

Spring Boot internally defaults this parameter value to create-drop if no schema manager has been detected, otherwise none for all other cases.


<bean id="myEmf"
  class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    <property name="dataSource" ref="dataSource" />
    <property name="packagesToScan" value="com.baeldung.persistence.model" />
    <property name="jpaVendorAdapter">
        <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
    </property>
    <property name="jpaProperties">
        <props>
            <prop key="hibernate.hbm2ddl.auto">create-drop</prop>
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
        </props>
    </property>
</bean>
 
<bean id="dataSource"
  class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
    <property name="url" value="jdbc:mysql://localhost:3306/spring_jpa" />
    <property name="username" value="tutorialuser" />
    <property name="password" value="tutorialmy5ql" />
</bean>
 
<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="myEmf" />
</bean>
<tx:annotation-driven />
 
<bean id="persistenceExceptionTranslationPostProcessor" class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

---------------------------------------------------------------------------------------------

JPA EntityManager
One of the most important aspect of a program is connection with database. Database connection and transaction with database is considered as most expensive transaction. ORM is a very important tool in this regard. ORM helps in representing relations of database in terms of java objects.
ORM consists of two concepts object-oriented and relational programming.
Hibernate is an ORM framework where programmer describes the way objects are represented in database. Hibernate handles the conversion automatically.
Hibernate provides implementation of JPA interfaces EntityManagerFactory and EntityManager.
EntityManagerFactory provides instances of EntityManager for connecting to same database. All the instances are configured to use the same setting as defined by the default implementation. Several entity manager factories can be prepared for connecting to different data stores.
JPA EntityManager is used to access a database in a particular application. It is used to manage persistent entity instances, to find entities by their primary key identity, and to query over all entities.
JPA EntityManager Methods
JPA EntityManager is supported by the following set of methods. For better readability, I have not mentioned method arguments.

persist – Make an instance managed and persistent.
merge – Merge the state of the given entity into the current persistence context.
remove – Remove the entity instance.
find – Find by primary key. Search for an entity of the specified class and primary key. If the entity instance is contained in the persistence context, it is returned from there.
getReference – returns and instance which is lazily fetched and will throw EntityNotFoundException when the instance is accessed for the first time.
flush – Synchronizes the persistence context with the database.
setFlushMode – set the flush mode for all the objects of the persistence context.
getFlushMode – get the flush mode for all the objects of the persistence context.
lock – Lock an entity instance that is contained in the persistence context with the specified lock mode type.
refresh – it refreshes the state of the instance from the database also it will overwrite the changes to the entity.
clear – Clear the persistence context, causing all managed entities to become detached. Changes made to entities that have not been flushed to the database will not be persisted.
detach – this is similar to the clear method, only addition is the entity which previously referenced the detached object will continue to do so.
contains – it checks if the managed entity belongs to the current persistence context.
getLockMode – get the current lock mode for entity instance.
setProperty – set an entity manager property or hint.
getProperties – get the properties and hints associated with the entity manager.
createQuery – Create an instance of Query for executing a Java Persistence query language statement.
createNamedQuery – Create an instance of Query for executing a Java Persistence named query language statement.
createNativeQuery – Create an instance of Query for executing a native sql statement.
createNamedStoredProcedureQuery – Create an instance of StoredProcedureQuery for executing a stored procedure in the database.
createStoredProcedureQuery – Create an instance of StoredProcedureQuery for executing a stored procedure in the database.
joinTransaction – Indicate to the entity manager that a JTA transaction is active. This method should be called on a JTA application managed entity manager that was created outside the scope of the active transaction to associate it with the current JTA transaction.
isJoinedToTransaction – it determines if the entityManager is linked to the current transaction.
unwrap – Return an object of the specified type to allow access to the provider-specific API
getDelegate – return the provider object for the entityManager.
close – close an application-managed entityManager.
isOpen – determine if the entityManager is open.
getTransaction – Return the resource-level EntityTransaction object.
getEntityManagerFactory – provides the entity manager factory for the entity manager.
getCriteriaBuilder – Return an instance of CriteriaBuilder for the creation of CriteriaQuery objects.
getMetamodel – Return an instance of Metamodel interface for access to the metamodel of the persistence unit.
createEntityGraph – Return a mutable EntityGraph that can be used to dynamically create an EntityGraph.
getEntityGraph – returns a named entityGraph
Let’s look at some of the methods through EntityManager example project.

Hibernate EntityManager Example
We will create a maven project for JPA Hibernate EntityManager example, below image illustrates different component of our Eclipse project.

JPA EntityManager, Hibernate EntityManager example
<dependency>
	<groupId>org.hibernate</groupId>
	<artifactId>hibernate-core</artifactId>
	<version>5.2.6.Final</version>
</dependency>

<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
		 http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
	version="2.1">

	<persistence-unit name="persistence">
	<description>Hibernate Entity Manager Example</description>
	<provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>

	<properties>
		<property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
		<property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/Test" />
		<property name="javax.persistence.jdbc.user" value="journaldev" />
		<property name="javax.persistence.jdbc.password" value="journaldev" />
		<property name="hibernate.show_sql" value="true" />
</properties>

</persistence-unit>

</persistence>
hibernate.show_sql is used to tell hibernate to print sql queries into log files or console.
The most important configuration is provider class i.e.
org.hibernate.jpa.HibernatePersistenceProvider. This is how Hibernate is hooked into our application to be used as JPA implementation.
There are properties to connect to your database and driver to use.
It is important to note that persistence.xml should be placed in the META-INF directory, as you can see from the project image.

EntityManagerFactory entityManagerFactory = Persistence.createEntityManagerFactory("persistence");
		EntityManager entityManager = entityManagerFactory.createEntityManager();
		
		
-----------------------------------------------------------------------------------------------

	<bean id="hibernatePropertiesSfdlexp"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="properties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
                <prop key="hibernate.connection.autocommit">true</prop>
                <prop key="hibernate.connection.release_mode">after_transaction</prop>
                <prop key="hibernate.default_schema">SFDLEXP</prop>
                <prop key="hibernate.show_sql">false</prop>
				
				<prop key="jadira.usertype.autoRegisterUserTypes">true</prop>
				<prop key="jadira.usertype.databaseZone">jvm</prop>
				<prop key="jadira.usertype.javaZone">jvm</prop>

                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.query.factory_class">org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory</prop>
                <prop key="hibernate.jdbc.batch_size">300</prop>
                <prop key="hibernate.jdbc.fetch_size">2000</prop>
                <!--
                    <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
                    <prop key="hibernate.cache.use_query_cache">true</prop>
                    <prop key="hibernate.cache.use_second_level_cache">true</prop>
                    <prop key="hibernate.cache.region.factory_class">net.sf.ehcache.hibernate.EhCacheRegionFactory</prop>
                    <prop key="hibernate.cache.provider_configuration_file_resource_path">ehcache.xml</prop>
                    <prop key="hibernate.cache.disk-persistent">true</prop>
                    -->
            </props>
        </property>
    </bean>
    <!-- 	<bean id="dataSourceSfdlexp2" class="org.springframework.jndi.JndiObjectFactoryBean">
                <property name="resourceRef" value="true"/>
                <property name="jndiName" value="jdbc/dataCmbsSfdlexp" />
      </bean> -->

    <!-- Enable annotation style of managing transactions -->
    <tx:annotation-driven transaction-manager="transactionManagerSfdlexp"/>

   
        <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">  
        <property name="dataSource" ref="dataSourceSfdlexp"/>
        <property name="packagesToScan">
            <list>
                <value>com.sp.sf.sas.us.dto.**</value>
                <value>com.sp.sf.sas.us.domain</value>
                <value>com.sp.sf.sas.us.yieldAnalysis</value>
            </list>
        </property>
        <property name="mappingLocations">
            <list>
                <value>classpath:cmbs-sql-named-queries.xml</value>
            </list>
        </property>
        <property name="hibernateProperties" ref="hibernatePropertiesSfdlexp"></property>
    </bean>

    <bean id="transactionManagerSfdlexp"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>		
	
	
	
	
	
	
--------------------------------------------------------------------------------------------------

update vs merge
---------------

Merge 	-> select query followed by update query (to cache this object)
Update 	-> just update the object and make it persistent

When there is a detached object and when trying to make that object persistent inside another session
In the same session before we update this detached object, if we are using get method on same id field then
1. We get Exception if we use update 
2. We don't get any exception if we use merge

//Detached object changes
stock.setName("Java");

session = HibernateUtil.getSessionFactory().openSession();
session.beginTransaction();

Topic stock2= session.load(Topic.class, stock.getId());	//Lazy init
System.out.println("stock2: "+stock2.toString());	//does a select query

//session.update(stock); //org.hibernate.NonUniqueObjectException: A different object with the same identifier value was already associated with the session : [com.demo.model.Topic#1]
session.merge(stock);	//merges changes and caches it for tracking

session.getTransaction().commit();
session.close();
-----------------------------------------------------
dynamic-update=true
-------------------
Creates a dynamic update query with only those fields that were modifies
Default is false, which includes all fields in the update query

Even if we enable dynamicUpdate, it wont work if the object we are trying to update isn't already present in the persistence context...
To make it work we need to have @SelectBeforeUpdate annotation to first get the object and then identify which fields have changes 
and construct dynamic query.

Since Merge by default does a select followed by update (by default @SelectBeforeUpdate), dynamicUpdate will work.

----------------------------------------------------------------------------------------------------------
Person.java
-----------
@OneToMany(mappedBy="person", cascase=CascadeType.ALL)
List<Address> addresses= new ArrayList();

MappedBy signals hibernate that the key for the relationship is on the other side.

This means that although you link 2 tables together, only 1 of those tables has a foreign key constraint to the other one. MappedBy allows you to still link from the table not containing the constraint to the other table.

Note:- it can be use for following annotations:- 1.@OneTone 2.@OneToMany 3.@ManyToMany

Note---It cannot be use for following annotation :- 1.@ManyToOne

-----------------------------------------------------

@JoinColumn 
-> when u need a new column (foreign key) in ur table referencing some other table with primary key.
-> used for onetomany and manytoone relations

-----------------------------------------------------

OneToOne relation
-----------------

Stock.java
----------

@OneToOne(fetch = FetchType.LAZY, mappedBy = "stock", cascade = CascadeType.ALL)
public StockDetail getStockDetail() {
	return this.stockDetail;
}

StockDetail.java
----------------
@OneToOne(fetch = FetchType.LAZY)
@PrimaryKeyJoinColumn			//equal to @JoinColumn(name="stock_id", referencedColumnName="id")
public Stock getStock() {
	return this.stock;
}

	
-----------------------------------------------------

@OneToOne(cascade=CascadeType.ALL)
@JoinTable(name="user_role", joinColumns=@JoinColumn(name="user_id", referencedColumnName="id"), 
			inverseJoinColumns=@JoinColumn(name="role_id", referencedColumnName="id"))
private Role role;
-> when u need a new table for maintaining the relationship
-> used for manytomany relations or depending on the situation u may use it 

Both need to be present
-----------------------
@OneToMany(mappedBy="person", cascade=CascadeType.ALL) //->person is field present in Address.person
List<Address> addresses = new ArrayList<Address>(); 

@ManyToOne
@JoinColumn(name="person_id", nullable=false) //-> we need a new join column
private Person person;

----------------------------------------------------------------------------------------------------------

ManyToMany
----------

Stock		<----------- stock_categories ---------> 	Category 

Stock.java
----------
@ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
@JoinTable(name = "stock_category", catalog = "mkyongdb", 
			joinColumns = { @JoinColumn(name = "STOCK_ID", nullable = false, updatable = false) }, 
			inverseJoinColumns = { @JoinColumn(name = "CATEGORY_ID", nullable = false, updatable = false) })
public Set<Category> getCategories() {
	return this.categories;
}

Category.java
-------------
@ManyToMany(fetch = FetchType.LAZY, mappedBy = "categories")	//categories is a field in Stock class which contains the relation
public Set<Stock> getStocks() {
	return this.stocks;
}


----------------------------------------------------------------------------------------------------------










