Collection - interface
Collections - class
------------------------------------------------------------------

Collection(I) provides some basic operations. It implements Iterable.
It does not work based on index.
There are interfaces which extend base interface and provide some more operations

1. List -> provides indexed based insertion
2. Set
3. SortedSet extends Set
	|-NavigableSet extends SortedSet
		|-TreeSet implements NavigableSet
4. Map
5. SortedMap extends Map
6. Queue
7. Deque

Note: 
-----
1. Hash implementation is always unordered, insertion order may or may not be preserved.
2. LinkedList implementation is always ordered, insertion order is always preserved.

------------------------------------------------------------------

Collection(I) -> List(I)
List(I) -> ArrayList(C) 

Collection values= new ArrayList();

------------------------------------------------------------------
(i)List - Indexed values inserted and retrieved (can add/remove ele's based on index)

1. Vector/ArrayList -> Dynamic Array -> Retrieval O(1) - Insertion/deletion - O(n)
Diff between Vector and ArrayList 
elements inserted into a vector, when vector is full new array created with double its size and elements inserted into that new array in the same order.
Vector - 100%
ArrayList - 50%
Vector - Thread safe (every method uses synchronized)
ArrayList- Not Thread safe
Vector- slow
Arraylist- fast

2. LinkedList -> Retrieval O(n) - Insertion/deletion - O(1)

------------------------------------------------------------------

Set - unique values -> add() methods returns boolean
HashSet- Order of elements inserted is different from what is retrieved, since values are inserted based on hash.
TreeSet - Ordered set of unique values

NavigableSet<Integer> ns = new TreeSet<>(); //Used to navigate the Set lower(int), higher(int)
Methods: lower(int a)- <a, floor(int a) - <= a, higher(int a) - >a, ceiling(int a) - >=a, pollFirst() - ns.get(0), pollLast() - ns.get(ns.size()-1)

1. When adding objects into a HashSet, by default all objects will be different since the hashcode will be different. 
But if we want to remove duplicate objects then we need to override hashCode() and equals() method.

bucket#= obj.hashCode() & ( Bucket size - 1 );	( &- Bitwise AND )
equals() - search the linked list in the bucket for the same object using this method, if not found insert at the beginning.

2. When adding object to a TreeSet, we will get error at Compile time if the Class of the object added doesnt implement Comparable interface
since it will need to compare each object with another for sorting.

------------------------------------------------------------------
Map<K,V>, Entry<K,v> (interface within Map interface accessed by Map.Entry<K,v>)
Set<Map.Entry<K,V>> entrySet= map.entrySet();
for(Map.Entry<K,V> entry: entrySet){
(e.getKey()+":::"+e.getValue());
}

1. HashMap -> doesn't maintain insertion order
Hashcode calculated based on key
Each bucket has a linked list with each node contains (hashcode, key, value, next, previous)
Allows one null key

2. Hashtable is similar to HashMap but it is synchronized
Can work with multiple threads
Not null key
Slower than HashMap

3. TreeMap -> orders the elements in asc order by key

4. LinkedHashMap -> maintains the insertion order

Cautions:
---------
1. When adding an Object into a HashMap, you must implement an equals() and a hashCode() method in your class Collection to make it work properly.
2. When adding objects to a TreeMap, you must implement Comparable interface or it will throw Compile time exception.
Exception in thread "main" java.lang.ClassCastException: GeneKey cannot be cast to java.lang.Comparable

------------------------------------------------------------------

Collection.sort(list, (o1,o2)->{	//implement comparator interface with lambda expression
	return o1>o2?1:-1;
});

Iterable
--------

public interface Iterable<T> {
  public Iterator<T> iterator();    
}

The Java Iterable interface (java.lang.Iterable) is one of the root interfaces of the Java Collections API. 
A class that implements the Java Iterable interface can be iterated with the Java for-each loop. 
By iterating I mean that its internal elements can be iterated.

The Collection interface extends Iterable, so all subtypes of Collection also implement the Iterable interface. 
For instance, both the Java List and Set interfaces extend the Collection interface, and thereby also the Iterable interface.

Ex:	// Generates random positive integers between 0 and 100 until
        // a number evenly divisible by 7 is encountered.

		Iterator<Integer> inputGenerator = new Iterator<Integer>() {

            Random random = new Random();
            int current;

            @Override
            public boolean hasNext() {
                current = random.nextInt(100);
                return current % 7 != 0;
            }

            @Override
            public Integer next() {
                return current;
            }
        };

Performance
-----------

Iterating the List via the Java for-each loop is slower than iterating the list via a standard for-loop 

for(int i=0; i<list.size(); i++) {
    Object obj = list.get(i);
}

Each iteration will call the List iterator() method, which will create a new Iterator object. 
Creating a new object thousands, perhaps even millions of times per second does have a small performance penalty compared to just iterating the List using a standard for-loop.


-----------------------------------------------------------------------------

java.lang.Comparable
-----------
Implementing Comparable means "I can compare myself with another object." 
This is typically useful when there's a single natural default comparison.

java.util.Comparator
----------
Implementing Comparator means "I can compare two other objects." 
This is typically useful when there are multiple ways of comparing two instances of a type 
- e.g. you could compare people by age, name etc. 
There can be a NameComparator, AgeComparator etc and which one to use can depend on ur requirement.

Collections class
-----------------
Methods (static)
-------

static <T> boolean addAll(Collection<? super T> c, T... elements) 
    Adds all of the specified elements to the specified collection.

static <T> void copy(List<? super T> dest, List<? extends T> src) 
          Copies all of the elements from one list into another.
	
static <T> Set<T> singleton(T o) 
          Returns an immutable set containing only the specified object.

static <T> List<T> singletonList(T o) 
        Returns an immutable list containing only the specified object.

static <K,V> Map<K,V> singletonMap(K key, V value) 
        Returns an immutable map, mapping only the specified key to the specified value.
	
static <T extends Comparable<? super T>> void sort(List<T> list): 
		Sorts the elements of the List in ascending order of their natural ordering.
		Sorts the objects of  the list in the logic mentioned in compareTo(Object obj) method

static <T> void sort(List<T> list, Comparator<? super T> c): 
		Sorts the elements of the list according to the order induced by the comparator.

static <T> Comparator<T> reverseOrder()  Returns a Comparator that imposes the reverse of natural ordering of elements of the collection.

static<T> Comparator<T> reverseOrder(Comparator<T> cmp) 
    Returns a comparator that imposes the reverse ordering of the specified comparator.

ex 1: Collections.sort(fruits, Collections.reverseOrder());

ex 2: Collections.sort(fruitList, Collections.reverseOrder(new SortByName()));
		fruitList.forEach(fruit -> {
			System.out.println(fruit.getId() + " " + fruit.getName() + " " + 
			  fruit.getTaste());
      });

Used in multi-threaded environments (a.k.a. concurrent programming).
------------------------------------	  
synchronizedCollection(Collection<T> c)
	Returns a synchronized (thread-safe) collection backed by the specified collection.



static <T> List<T> synchronizedList(List<T> list) 
          Returns a synchronized (thread-safe) list backed by the specified list.

static <K,V> Map<K,V> synchronizedMap(Map<K,V> m) 
       Returns a synchronized (thread-safe) map backed by the specified map.
static
<T> Set<T>
synchronizedSet(Set<T> s) 
          Returns a synchronized (thread-safe) set backed by the specified set.
static
<K,V> SortedMap<K,V>
synchronizedSortedMap(SortedMap<K,V> m) 
          Returns a synchronized (thread-safe) sorted map backed by the specified sorted map.
static
<T> SortedSet<T>
synchronizedSortedSet(SortedSet<T> s) 
          Returns a synchronized (thread-safe) sorted set backed by the specified sorted set.

Ex: Accessing the synchronized collection

	Collection<Integer> syncCollection = Collections.synchronizedCollection(new ArrayList<>());
    Runnable listOperations = () -> {
        syncCollection.addAll(Arrays.asList(1, 2, 3, 4, 5, 6));
    };
     
    Thread thread1 = new Thread(listOperations);
    Thread thread2 = new Thread(listOperations);
    thread1.start();
    thread2.start();
    thread1.join();
    thread2.join();
     
    assertThat(syncCollection.size()).isEqualTo(12);
}


Ex 2: Iterating over a synchronized Collection

List<String> syncCollection = Collections.synchronizedList(Arrays.asList("a", "b", "c"));
List<String> uppercasedCollection = new ArrayList<>();
     
Runnable listOperations = () -> {
    synchronized (syncCollection) {
        syncCollection.forEach((e) -> {
            uppercasedCollection.add(e.toUpperCase());
        });
    }
};

In all cases where we need to iterate over a synchronized collection, we should implement this idiom. 
This is because the iteration on a synchronized collection is performed through multiple calls into the collection. 
Therefore they need to be performed as a single atomic operation.


8.1. Synchronized Collections
-----------------------------
Synchronized collections achieve thread-safety through intrinsic locking, and the entire collections are locked. 
Intrinsic locking is implemented via synchronized blocks within the wrapped collection’s methods.

As we might expect, synchronized collections assure data consistency/integrity in multi-threaded environments. 
However, they might come with a penalty in performance, as only one single thread can access the collection at a time (a.k.a. synchronized access).

8.2. Concurrent Collections
-----------------------------
Concurrent collections (e.g. ConcurrentHashMap), achieve thread-safety by dividing their data into segments. 
In a ConcurrentHashMap, for example, different threads can acquire locks on each segment, 
so multiple threads can access the Map at the same time (a.k.a. concurrent access).

Concurrent collections are much more performant than synchronized collections, due to the inherent advantages of concurrent thread access.

So, the choice of what type of thread-safe collection to use depends on the requirements of each use case, and it should be evaluated accordingly.










