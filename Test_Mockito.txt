Mockito is a java based mocking framework, used in conjunction with other testing frameworks such as JUnit and TestNG.

It internally uses Java Reflection API and allows to create objects of a service. 
A mock object returns a dummy data and avoids external dependencies. 
It simplifies the development of tests by mocking external dependencies and apply the mocks into the code under test.

<dependency>
     <groupId>org.mockito</groupId>
     <artifactId>mockito-core</artifactId>
     <version>2.19.0</version>
     <scope>test</scope>
</dependency>
<!-- Junit 5 -->
<dependency>
     <groupId>org.mockito</groupId>
     <artifactId>mockito-junit-jupiter</artifactId>
     <version>2.19.0</version>
     <scope>test</scope>
</dependency>

Enable Mockito Annotations
--------------------------

In order for annotations to be enabled

@RunWith(MockitoJUnitRunner.class)
public class MockitoAnnotationTest {
    ...
}

(OR)

@Before
public void init() {
    MockitoAnnotations.initMocks(this);
}

Mockito Mock Creation
---------------------
The Mockito framework allows us to create mock objects using either @Mock annotation or mock() static method.

Simple Mocking
--------------
public static <T> T mock(Class<T> classToMock)

Mocking with Mock’s Name
------------------------
public static <T> T mock(Class<T> classToMock, String name)
	Mock name is helpful in debugging, where the mock’s name is used to track down verification errors.

	@Test
	void testCalc() {
		AddService addService;
		CalcService calcService;

		addService = Mockito.mock(AddService.class);
		calcService = new CalcService(addService);

		int num1 = 11;
		int num2 = 12;
		int expected = 23;

		when(addService.add(num1, num2)).thenReturn(expected);

		int actual = calcService.calc(num1, num2);

		assertEquals(expected, actual);
	}


	(OR)
	
	@Mock
	AddService addService;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.initMocks(this);
	}
	
	Since we wanted to do unit testing of CalcService class only, we have to mock the AddService instance.
	
	public interface AddService {
		public int add(int num1, int num2);
	}
	
Mockito Behavior Verification
-----------------------------

To add a behavior to the mocked class the below functions are used

1. when() and 
2. thenReturn()

when(addService.add(num1, num2)).thenReturn(expected);


Mockito Verify Interaction
--------------------------

Mockito framework keeps track of all the method calls and their parameters to the mock object. 
Mockito verify() method on the mock object verifies that a method is called with certain parameters. 
We can also specify the number of invocation logic, such as the exact number of times, at least specified number of times, less than specified number of times etc. We can use VerificationModeFactory for number of invocation times logic.

Mockito verify() method checks that a method is called with the right parameters. 

Note: It does not check the result of a method call like assert method.

Ex: 	
		List<String> mockedList = Mockito.mock(List.class);

		mockedList.add("first-element");
		mockedList.add("second-element");
		mockedList.add("third-element");
		mockedList.add("third-element");
		mockedList.clear();				//Here we are clearing the list list.size()==0

		verify(mockedList).add("first-element");	//even though list is empty this will confirm if add is called with this parameters
		verify(mockedList).add("second-element");
		verify(mockedList, VerificationModeFactory.times(2)).add("third-element");

		verify(mockedList).clear();		//verifies if clear method is called
		
Mockito Stub Concrete Class
---------------------------
Using when() – thenReturn() function, we can stub a concrete/implementation class and also a single element of a collection. 
The non-stubbed elements will contain null in them.

		ArrayList mockedList = mock(ArrayList.class);

		when(mockedList.get(0)).thenReturn("first-element");

		System.out.println(mockedList.get(0));
		assertEquals("first-element", mockedList.get(0));
		
		// "null" gets printed as get(1) is not stubbed
		System.out.println(mockedList.get(1));
		
Mockito Spy
-----------
When you call the method of a spied object, the real method will be called, unless a predefined behavior was defined. 
Using spy we can define a behavior by using when() – theReturn() functions or can invoke real implementation.

Ex 1:
-----
		List<String> list = new ArrayList<>();
		List<String> listSpy = spy(list);

		listSpy.add("first-element");
		System.out.println(listSpy.get(0));

		assertEquals("first-element", listSpy.get(0));
		when(listSpy.get(0)).thenReturn("second-element");
		System.out.println(listSpy.get(0));
		assertEquals("second-element", listSpy.get(0));

Ex 2:
------		
Used the real method spiedList.add() to add elements to the spiedList.
Stubbed the method spiedList.size() to return 100 instead of 2 using Mockito.doReturn().

		Mockito.doReturn(100).when(listSpy).size();
		assertEquals(100, listSpy.size());
		
Spy vs Mock
-----------
Both can be used to mock methods or fields. 
The difference is that in mock, you are creating a complete mock or fake object while in spy, 
there is the real object and you just spying or stubbing specific methods of it.

While in spy objects, of course, since it is a real method, when you are not stubbing the method, then it will call the real method behavior. 
If you want to change and mock the method, then you need to stub it.

Consider the example below as a comparison.

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.runners.MockitoJUnitRunner;
 
import java.util.ArrayList;
import java.util.List;
 
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.when;
 
@RunWith(MockitoJUnitRunner.class)
public class MockSpy {
 
    @Mock
    private List<String> mockList;
 
    @Spy
    private List<String> spyList = new ArrayList();
 
    @Test
    public void testMockList() {
        //by default, calling the methods of mock object will do nothing
        mockList.add("test");

        Mockito.verify(mockList).add("test");
        assertEquals(0, mockList.size());
        assertNull(mockList.get(0));
    }
 
    @Test
    public void testSpyList() {
        //spy object will call the real method when not stub
        spyList.add("test");

        Mockito.verify(spyList).add("test");
        assertEquals(1, spyList.size());
        assertEquals("test", spyList.get(0));
    }
 
    @Test
    public void testMockWithStub() {
        //try stubbing a method
        String expected = "Mock 100";
        when(mockList.get(100)).thenReturn(expected);
 
        assertEquals(expected, mockList.get(100));
    }
 
    @Test
    public void testSpyWithStub() {
        //stubbing a spy method will result the same as the mock object
        String expected = "Spy 100";
        //take note of using doReturn instead of when
        doReturn(expected).when(spyList).get(100);
 
        assertEquals(expected, spyList.get(100));
    }
}
When shoud you use mock or spy? If you want to be safe and avoid calling external services and just want to test the logic inside of the unit, then use mock. If you want to call external service and perform calling of real dependency, or simply say, you want to run the program as it is and just stub specific methods, then use spy. So that’s the difference between spy and mock in mockito.
		
Mockito Captor
--------------
@Captor (OR) ArgumentCaptor : Used to capture the arguments to a method

Example:
--------
		ArgumentCaptor<String> arg = ArgumentCaptor.forClass(String.class);
	 
		mockList.add("one");
		Mockito.verify(mockList).add(arg.capture());
	 
		assertEquals("one", arg.getValue());
			
		(OR)	
			
		@Mock
		List mockedList;
		 
		@Captor
		ArgumentCaptor argCaptor;
		 
		@Test
		public void whenUseCaptorAnnotation_thenTheSam() {
			mockedList.add("one");
			Mockito.verify(mockedList).add(argCaptor.capture());
		 
			assertEquals("one", argCaptor.getValue());
		}
		
		
	
-------------------------------------------------------------------------------
		
@InjectMocks 
	creates an instance of the class on which this annotation is used and injects the mocks that are created with the 
	@Mock (or @Spy) annotations into this instance.	
	

Mockito tries to inject mocked dependencies using one of the three approaches, in the specified order.

1. Constructor Based Injection – 
		when there is a constructor defined for the class, Mockito tries to inject dependencies using the biggest constructor.

2. Setter Methods Based – 
		when there are no constructors defined, Mockito tries to inject dependencies using setter methods.

3. Field Based – 
		if there are no constructors or field-based injection possible, then mockito tries to inject dependencies into the field itself.	
	
	
Say we have Game and Player class.

	@RunWith(MockitoJUnitRunner.class)
	public class GameTest {

	  @Mock Player player;

	  @Spy List<String> enemies = new ArrayList<>();

	  @InjectMocks Game game;

	  @Test 
	  public void attackWithSwordTest() throws Exception {
		Mockito.when(player.getWeapon()).thenReturn("Sword");

		enemies.add("Dragon");
		enemies.add("Orc");

		assertEquals(2, game.numberOfEnemies());

		assertEquals("Player attack with: Sword", game.attack());
	  }
	}

	class Game {

	  private Player player;

	  private List<String> opponents;

	  public Game(Player player, List<String> opponents) {
		this.player = player;
		this.opponents = opponents;
	  }

	  public int numberOfEnemies() {
		return opponents.size();
	  }

	  // ...
		
	That's because Mockito will check the Type Signature of Game class, which is Player and List<String>.	
		
-------------------------------------------------------------------------------------------------------------

Exception
---------

Often, we may run into NullPointerException when we try to actually use the instance annotated with @Mockor @Spy, as in the example:		
Most of the time this happens simply because we forgot to properly enable Mockito annotations.		
		
		
		
Conclusion
----------
Mockito is a popular mocking framework for Java unit testing. 
We can easily mock dependencies using Mockito. 
Mockito coding style is fluent and similar to JUnit and TestNG frameworks, so its learning curve is very small.



















































































