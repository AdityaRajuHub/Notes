ng-app="nameOfModule" on the html tag

ng-controller="nameOfController" on the tag u want the variables of scope to apply
each controller is associated with a scope object

u need to register the controller and services to the module

var module= angular.module("nameOfModule", [modules,separated]); // like importing other classes
module.controller("nameOfController", controllerFunction); //registering

controllerFunction has a special token as an argument which can be injected at runtime by angular
which is called dependancy injection.

function controllerFunction($scope)
{
//here u can add variables, functions to the scope object
//and use them in the view
}

{{expression}}
{{access scope variables here}}

angular supports 2 way data binding

ng-model is used for binding html tags to scope
ex: <input type="text" ng-model=""/>

difference btween ng-bind and ng-model

Facts abt scope object

1. there is a scope object associated with every controller

2. there is a global scope object called root scope associated to ng-app

3. when u declare ng-controller within another ng-controller,
then the scope object of the nested controller is child of it's parent controller's scope,
it inherits all properties from its parent scope

4. there is another way to declare a controller ie. Controller as syntax
what this does is it creates a new scope object contructor function
instead of injecting $scope
ex: <div ng-controller="ctrl as ct">{{ct.name}}</div>
function ctrl(){this.name="controller name";} //initializing variables with this keyword
using controller as syntax there is no inheritance since scope object is a new object

5. whenever there is a class ng-scope added to an element,
it means that a new scope variable is created on that html element

Directives

1. ng-if completely removes the element if false
2. ng-show adds css display:none; if false
3. ng-hide adds css display:none; if true
4. ng-repeat iterates over an array and repeats the html element on which it is present 
for every iteration it creates a new scope object, so every repeated element will have ng-scope class
ex: <div ng-repeat="obj in namesArr">Name {{ $index }}: <p ng-bind="obj.name"/></div>
since the same obj variable has to point to multiple objects, in order to preserve 2-way binding 
a new scope object for every iteration is created and obj variable added to tht scope object
$index -> number, $first -> boolean, $last -> boolean, $middle -> boolean, $even -> boolean, $odd -> boolean


Services

Controllers cannot communicate and share logic, so we use services 
and provide common shared values and functionality.

angular.value("namesvc","common name to be used at multiple places");
this service can be injected into the controller that wants to use this namesvc

angular.constant("AppDataSvc", XYZ);
XYZ can be an object, function, variable

Factory Service

	When u want to get the data on the fly (instead of hardcoding it)
	var app= angular.module("someModule",[]);
	app.factory("AppDataFctrySvc", function(){ 
		//some logic to get data 
		return data;
	});

OR

	function getData(){ 
			//some logic to get data 
			return data;
	}
	app.value("AppDataValueSvc", getData());
	app.value("AppDataFctrySvc", getData);


Service service
	
	Similar to factory except that here the function passed in as an argument to service needs to be constructor function
	
app.value("AppNameSvc", "New Contact App");

function prepareAppConfig(AppNameSvc) { //dependacy inject other value service also works
	var value={};
	
	value.name= AppNameSvc;
	value.author= 'abc';
	value.builtDt= new Date().toDateString();
	
	return value;
} 
	
function AppConfig(AppNameSvc) { //dependacy inject other value service also works
	
	this.name= AppNameSvc;
	this.author= 'abc';
	this.builtDt= new Date().toDateString();
	
} 	

app.factory('AppDataFctrySvc', prepareAppConfig);
app.service('AppServiceSvc', AppConfig);

If we are moving the services, controllers to a different js file then u need to write them as IIFE (Immediately invoked function expressions) 
to prevent global scope

app.js
-------
var app = angular.module("contactApp", []);

contact.controller.js
---------------------
(function(){
	var app= angular.module("contactApp"); //returns the existing 
	
	app.controller("ContactCtrl", ContactCtrl);
	
	function ContactCtrl(AppDataSvc) {
		this.contacts= AppDataSvc.contacts;
		//some other logic here
	}
})(); //IIFE
	
$http service
-------------

used to invoke get and post requests

Asynchrnous js
--------------

Generally js is a single threaded language, so when we invoke a get request the browser would hang until we get a response and other components 
would not be loaded in the meantime
To avoid this we use callbacks
Callbacks help us to make the code asych
we pass the callback function as an argument to the GET/POST request so that it will be executed once the long running request resolves.
Meanwhile the browser is free to load other components since it is not responsible for the request.
	
	
Promises

A promise represents an operation that hasn't completed yet but is expected to in the future.


