The central interface in Spring Data repository abstraction is Repository (probably not that much of a surprise). It takes the the domain class to manage as well as the id type of the domain class as type arguments.

1. CrudRepository extends Repository<T, Id>
2. PagingAndSortingRepository extends (1) 
3. JpaRepository extends (2)

The CrudRepository provides sophisticated CRUD functionality for the entity class that is being managed.

public interface CrudRepository<T, ID extends Serializable>
    extends Repository<T, ID> {
                                                                                                                       (1)
    <S extends T> S save(S entity);
                                                                                                                       (2)
    T findOne(ID primaryKey);
                                                                                                                       (3)
    Iterable<T> findAll();

    Long count();
                                                                                                                       (4)
    void delete(T entity);
                                                                                                                       (5)
    boolean exists(ID primaryKey);
                                                                                                                       (6)
    // … more functionality omitted.
}

------------------------------

public interface PagingAndSortingRepository<T, ID extends Serializable> 
  extends CrudRepository<T, ID> {

  Iterable<T> findAll(Sort sort);

  Page<T> findAll(Pageable pageable);
}

PagingAndSortingRepository<User, Long> repository = // … get access to a bean
Page<User> users = repository.findAll(new PageRequest(1, 20)); // PageRequest implements Pageable

------------------------------

Usually we will have persistence technology specific sub-interfaces to include additional technology specific methods.



1. Declare an interface extending Repository or one of its subinterfaces and type it to the domain class that it will handle.

public interface PersonRepository extends Repository<User, Long> { … }

2. Declare query methods on the interface.

	List<Person> findByLastname(String lastname);

3. Set up Spring to create proxy instances for those interfaces.

	<?xml version="1.0" encoding="UTF-8"?>
	<beans...
	  <repositories base-package="com.acme.repositories" />
	</beans>

4. Get the repository instance injected and use it.

	public class SomeClient {

	  @Autowired
	  private PersonRepository repository;

	  public void doSomething() {
		List<Person> persons = repository.findByLastname("Matthews");
	  }
	}


Defining query methods
----------------------

The repository proxy has two ways to derive a store-specific query from the method name. 
It can derive the query from the method name directly, or by using an additionally created query.

Query lookup strategies
-----------------------

1. CREATE - attempts to construct a store-specific query from the query method name. 
	The general approach is to remove a given set of well-known prefixes from the method name and parse the rest of the method. 
	
2. USE_DECLARED_QUERY - tries to find a declared query and will throw an exception in case it can't find one. 
	The query can be defined by an annotation.

3. CREATE_IF_NOT_FOUND (default)
	CREATE_IF_NOT_FOUND combines CREATE and USE_DECLARED_QUERY.

Mechanism for query creation
----------------------------

1. Strips the prefixes find…By, read…By, and get…By
2. After the first "By" where clause starts
3. Use And and Or between properties (also supports Between, LessThan, GreaterThan, Like)

public interface PersonRepository extends Repository<User, Long> {

  List<Person> findByEmailAddressAndLastname(EmailAddress emailAddress, String lastname);

  // Enables the distinct flag for the query
  List<Person> findDistinctPeopleByLastnameOrFirstname(String lastname, String firstname);
  List<Person> findPeopleDistinctByLastnameOrFirstname(String lastname, String firstname);

  // Enabling ignoring case for an individual property
  List<Person> findByLastnameIgnoreCase(String lastname);
  // Enabling ignoring case for all suitable properties
  List<Person> findByLastnameAndFirstnameAllIgnoreCase(String lastname, String firstname);

  // Enabling static ORDER BY for a query
  List<Person> findByLastnameOrderByFirstnameAsc(String lastname);
  List<Person> findByLastnameOrderByFirstnameDesc(String lastname);
}

4. Also define constraints by traversing nested properties. 
	Assume Persons have Addresses with ZipCodes

	List<Person> findByAddressZipCode(ZipCode zipCode);	//	-> x.address.zipCode
	
	Algorithm: 
		1. Searches for AddressZipCode
		2. Splits at the camel case from right side
			Searches for AddressZip / Code -> AddressZip not found
			Searches for Address / ZipCode -> Finds Address -> Finds zipCode
						
	Ideally use "_" to separate properties
	List<Person> findByAddress_ZipCode(ZipCode zipCode);
	
5. Use Pageable and Sort to apply pagination and sorting to your queries dynamically
	
	Page<User> findByLastname(String lastname, Pageable pageable);

	List<User> findByLastname(String lastname, Sort sort);

	List<User> findByLastname(String lastname, Pageable pageable);
	
Some more keywords supported

Apart from And, Or, OrderBy, IgnoreCase

1. Is, Equals			findByFirstNameIs OR findByFirstNameEquals
2. Between				findByStartDateBetween	-> where x.startDate between ?1 and ?2
3. LessThan				findBySalaryLessThan	-> where x.salary < ?1
4. LessThanEqual
5. GreaterThan
6. GreaterThanEqual
7. IsNull
8. IsNotNull, NotNull
9. Like
10. StartingWith
11. EndingWith
12. Containing
13. Not			-> where x.lastName <> ?1
14. In, NotIn	findByAgeIn(Collection<Integer> ageList)
15. True, False	findByActiveTrue  -> where x.active = true
--------------------------------------------------------------------------------------------

JPA Named queries
-----------------

@NamedQuery 	-> Specify query with JPA Query Language

@NamedNative 	-> SQL Specific to DB
 
The way to access the Named Query is to name the query method of repository interface to match the name of named query

@NamedQuery(name="Person.findByName", query="select p from Person where p.name=?1")
Use method name as findByName in repository interface and pass params

@NamedQuery(name="Person.myQuery", value="select p from Person where p.name=?1 and p.salary > ?2")
Use method name as myQuery in repository interface and pass params

Named queries are hard to maintain since the entity class is fussy with queries.

@Query annotation:
------
Frees the entoty class from persistence related queries
Used in the repository interface directly on top of the method. 
This allows for co-location between query and repository.
Has precedence over NamedQuery when there is a name conflict.

public interface PersonRepository extends Repository<Person, Integer> {
	@Query(value="select p from Person p where LOWER(p.lastName)=LOWER(:lastName)")
	public Person find(@Param("lastName") String lastName);
	
	//for Update query
	@Transactional	->mandatory if not mentioned will throw error
	@Modifying //informs Spring that it is updating query and not a select query
	@Query(value="update Person p set p.email=:email where p.id=:id")
	public int updateUser(@Param("id") Integer id);
}
	
--------------------------------------------------------------------------------------------

Creating repository instances
-----------------------------

XML
<beans...>
<repositories base-package="com.acme.repositories">
  <context:exclude-filter type="regex" expression=".*SomeRepository" />
</repositories>
</beans>

JavaConfig
The repository infrastructure can also be triggered using a store-specific @Enable${store}Repositories annotation on a JavaConfig class. For an introduction into Java-based configuration of the Spring container, see the reference documentation.[1]

A sample configuration to enable Spring Data repositories looks something like this.

@Configuration
@EnableJpaRepositories("com.acme.repositories")
class ApplicationConfiguration {

  @Bean
  public EntityManagerFactory entityManagerFactory() {
    // …
  }
}


------------------------------------------------------------------------------

Async Query results
-------------------

Repository queries can be executed asynchronously as well. 
This means the query will immediately return and the actual query execution
is handed over to Spring TaskExecutor. (It executes the query on a separate thread)

1. Use @EnableAsync on top of Main Configuration class to enable asynchronous capability
2. Use @Async on top of the repository method
3. Use one of the allowed return types
	(i)   java.util.concurrent.Future<T>
	(ii)  java.util.concurrent.CompletableFuture<T>
	(iii) org.springframework.util.concurrent.ListenableFuture<T>

In the service

CompletableFuture<User> comp= userService.findByFirstName(firstName);
User user= comp.get(20, Timeout.SECONDS); //if no results within 20 secs then Timeout error




JPA Join Types
---------------
by baeldungPersistenceJPA
Get started with Spring Data JPA through the reference Learn Spring Data JPA course:
>> CHECK OUT THE COURSE
1. Overview
In this tutorial, we'll look at different join types supported by JPA.

For this purpose, we'll use JPQL, a query language for JPA.

2. Sample Data Model
Let's look at our sample data model that we'll use in the examples.

First, we'll create an Employee entity:

@Entity
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    private String name;

    private int age;

    @ManyToOne
    private Department department;

    @OneToMany(mappedBy = "employee")
    private List<Phone> phones;

    // getters and setters...
}
Each Employee will be assigned to only one Department:


freestar
@Entity
public class Department {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long id;

    private String name;

    @OneToMany(mappedBy = "department")
    private List<Employee> employees;

    // getters and setters...
}
Finally, each Employee will have multiple Phones:

@Entity
public class Phone {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private long id;

    private String number;

    @ManyToOne
    private Employee employee;

    // getters and setters...
}
3. Inner Joins
We'll start with inner joins. When two or more entities are inner-joined, only the records that match the join condition are collected in the result.

3.1. Implicit Inner Join With Single-Valued Association Navigation
Inner joins can be implicit. As the name implies, the developer doesn't specify implicit inner joins. Whenever we navigate a single-valued association, JPA automatically creates an implicit join:

@Test
public void whenPathExpressionIsUsedForSingleValuedAssociation_thenCreatesImplicitInnerJoin() {
    TypedQuery<Department> query
      = entityManager.createQuery(
          "SELECT e.department FROM Employee e", Department.class);
    List<Department> resultList = query.getResultList();
    
    // Assertions...
}
Here, the Employee entity has a many-to-one relationship with the Department entity. If we navigate from an Employee entity to her Department, specifying e.department, we'll be navigating a single-valued association. As a result, JPA will create an inner join. Furthermore, the join condition will be derived from mapping metadata.

3.2. Explicit Inner Join With Single-Valued Association
Next we'll look at explicit inner joins where we use the JOIN keyword in our JPQL query:


freestar
@Test
public void whenJoinKeywordIsUsed_thenCreatesExplicitInnerJoin() {
    TypedQuery<Department> query
      = entityManager.createQuery(
          "SELECT d FROM Employee e JOIN e.department d", Department.class);
    List<Department> resultList = query.getResultList();
    
    // Assertions...
}
In this query, we specified a JOIN keyword and the associated Department entity in the FROM clause, whereas in the previous query they weren't specified at all. However, other than this syntactic difference, the resulting SQL queries will be very similar.

We can also specify an optional INNER keyword:

@Test
public void whenInnerJoinKeywordIsUsed_thenCreatesExplicitInnerJoin() {
    TypedQuery<Department> query
      = entityManager.createQuery(
          "SELECT d FROM Employee e INNER JOIN e.department d", Department.class);
    List<Department> resultList = query.getResultList();

    // Assertions...
}
So since JPA automatically creates an implicit inner join, when would we need to be explicit?

First of all, JPA only creates an implicit inner join when we specify a path expression. For example, when we want to select only the Employees that have a Department, and we don't use a path expression like e.department, we should use the JOIN keyword in our query.

Second, when we're explicit, it can be easier to know what is going on.

3.3. Explicit Inner Join With Collection-Valued Associations
Another place we need to be explicit is with collection-valued associations.

If we look at our data model, the Employee has a one-to-many relationship with Phone. As in an earlier example, we can try to write a similar query:

SELECT e.phones FROM Employee e
However, this won't quite work as we may have intended. Since the selected association, e.phones, is collection-valued, we'll get a list of Collections instead of Phone entities:

@Test
public void whenCollectionValuedAssociationIsSpecifiedInSelect_ThenReturnsCollections() {
    TypedQuery<Collection> query 
      = entityManager.createQuery(
          "SELECT e.phones FROM Employee e", Collection.class);
    List<Collection> resultList = query.getResultList();

    //Assertions
}
Moreover, if we want to filter Phone entities in the WHERE clause, JPA won't allow that. This is because a path expression can't continue from a collection-valued association. So for example, e.phones.number isn't valid.

Instead, we should create an explicit inner join and create an alias for the Phone entity. Then we can specify the Phone entity in the SELECT or WHERE clause:

@Test
public void whenCollectionValuedAssociationIsJoined_ThenCanSelect() {
    TypedQuery<Phone> query 
      = entityManager.createQuery(
          "SELECT ph FROM Employee e JOIN e.phones ph WHERE ph LIKE '1%'", Phone.class);
    List<Phone> resultList = query.getResultList();
    
    // Assertions...
}
4. Outer Join
When two or more entities are outer-joined, the records that satisfy the join condition, as well as the records in the left entity, are collected in the result:

@Test
public void whenLeftKeywordIsSpecified_thenCreatesOuterJoinAndIncludesNonMatched() {
    TypedQuery<Department> query 
      = entityManager.createQuery(
          "SELECT DISTINCT d FROM Department d LEFT JOIN d.employees e", Department.class);
    List<Department> resultList = query.getResultList();

    // Assertions...
}
Here, the result will contain Departments that have associated Employees and also the ones that don't have any.

This is also referred to as a left outer join. JPA doesn't provide right joins where we also collect non-matching records from the right entity. Although, we can simulate right joins by swapping entities in the FROM clause.


freestar
5. Joins in the WHERE Clause
5.1. With a Condition
We can list two entities in the FROM clause and then specify the join condition in the WHERE clause.

This can be handy, especially when database level foreign keys aren't in place:

@Test
public void whenEntitiesAreListedInFromAndMatchedInWhere_ThenCreatesJoin() {
    TypedQuery<Department> query 
      = entityManager.createQuery(
          "SELECT d FROM Employee e, Department d WHERE e.department = d", Department.class);
    List<Department> resultList = query.getResultList();
    
    // Assertions...
}
Here, we're joining Employee and Department entities, but this time specifying a condition in the WHERE clause.

5.2. Without a Condition (Cartesian Product)
Similarly, we can list two entities in the FROM clause without specifying any join condition. In this case, we'll get a cartesian product back. This means that every record in the first entity is paired with every other record in the second entity:

@Test
public void whenEntitiesAreListedInFrom_ThenCreatesCartesianProduct() {
    TypedQuery<Department> query
      = entityManager.createQuery(
          "SELECT d FROM Employee e, Department d", Department.class);
    List<Department> resultList = query.getResultList();
    
    // Assertions...
}
As we can guess, these kinds of queries won't perform well.

6. Multiple Joins
So far, we've used two entities to perform joins, but this isn't a rule. We can also join multiple entities in a single JPQL query:

@Test
public void whenMultipleEntitiesAreListedWithJoin_ThenCreatesMultipleJoins() {
    TypedQuery<Phone> query
      = entityManager.createQuery(
          "SELECT ph FROM Employee e
      JOIN e.department d
      JOIN e.phones ph
      WHERE d.name IS NOT NULL", Phone.class);
    List<Phone> resultList = query.getResultList();
    
    // Assertions...
}
Here we're selecting all Phones of all Employees that have a Department. Similar to other inner joins, we're not specifying conditions since JPA extracts this information from mapping metadata.

7. Fetch Joins
Now let's talk about fetch joins. Their primary usage is for fetching lazy-loaded associations eagerly for the current query.


freestar
Here we'll eagerly load Employees association:

@Test
public void whenFetchKeywordIsSpecified_ThenCreatesFetchJoin() {
    TypedQuery<Department> query 
      = entityManager.createQuery(
          "SELECT d FROM Department d JOIN FETCH d.employees", Department.class);
    List<Department> resultList = query.getResultList();
    
    // Assertions...
}
Although this query looks very similar to other queries, there is one difference; the Employees are eagerly loaded. This means that once we call getResultList in the test above, the Department entities will have their employees field loaded, thus saving us another trip to the database.

However, we must be aware of the memory trade-off. We may be more efficient because we only performed one query, but we also loaded all Departments and their employees into memory at once.

We can also perform the outer fetch join in a similar way to outer joins, where we collect records from the left entity that don't match the join condition. In addition, it eagerly loads the specified association:

@Test
public void whenLeftAndFetchKeywordsAreSpecified_ThenCreatesOuterFetchJoin() {
    TypedQuery<Department> query 
      = entityManager.createQuery(
          "SELECT d FROM Department d LEFT JOIN FETCH d.employees", Department.class);
    List<Department> resultList = query.getResultList();
    
    // Assertions...
}
8. Summary
In this article, we covered JPA join types.




















