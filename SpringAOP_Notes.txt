Aspects
-------
Aspect-Oriented Programming (AOP) complements Object-Oriented Programming (OOP) by providing another way of thinking about program structure.

***Aspects enable the modularization of concerns such as transaction management that "cut across" multiple types and objects. 
(Such concerns are often termed crosscutting concerns in AOP literature.)

Join point: a point during the execution of a program, such as the execution of a method or the handling of an exception. In Spring AOP, a join point always represents a method execution.

Advice: action taken by an aspect at a particular join point. Different types of advice include "around," "before" and "after" advice. (Advice types are discussed below.) Many AOP frameworks, including Spring, model an advice as an interceptor, maintaining a chain of interceptors around the join point.

Pointcut: a predicate that matches join points. Advice is associated with a pointcut expression and runs at any join point matched by the pointcut (for example, the execution of a method with a certain name). The concept of join points as matched by pointcut expressions is central to AOP, and Spring uses the AspectJ pointcut expression language by default.

Introduction: declaring additional methods or fields on behalf of a type. Spring AOP allows you to introduce new interfaces (and a corresponding implementation) to any advised object. For example, you could use an introduction to make a bean implement an IsModified interface, to simplify caching. (An introduction is known as an inter-type declaration in the AspectJ community.)

Target object: object being advised by one or more aspects. Also referred to as the advised object. Since Spring AOP is implemented using runtime proxies, this object will always be a proxied object.

AOP proxy: an object created by the AOP framework in order to implement the aspect contracts (advise method executions and so on). In the Spring Framework, an AOP proxy will be a JDK dynamic proxy or a CGLIB proxy.

Weaving: linking aspects with other application types or objects to create an advised object. This can be done at compile time (using the AspectJ compiler, for example), load time, or at runtime. Spring AOP, like other pure Java AOP frameworks, performs weaving at runtime.

Types of advice:
---------------
Before advice: Advice that executes before a join point, but which does not have the ability to prevent execution flow proceeding to the join point (unless it throws an exception).

After returning advice: Advice to be executed after a join point completes normally: for example, if a method returns without throwing an exception.

After throwing advice: Advice to be executed if a method exits by throwing an exception.

After (finally) advice: Advice to be executed regardless of the means by which a join point exits (normal or exceptional return).

Around advice: Advice that surrounds a join point such as a method invocation. This is the most powerful kind of advice. Around advice can perform custom behavior before and after the method invocation. It is also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by returning its own return value or throwing an exception.

All advice parameters are statically typed, so that you work with advice parameters of the appropriate type 
(the type of the return value from a method execution for example) rather than Object arrays.


*****Note: The advice gets executed only when the methods are called in the app. 
But when application context is initialized(some setter or getter methods are called) then the advice is not executed.

Wildcards
---------
* - 1 or more
.. - 0 or more
empty - nothing
execution - takes methods
within    - takes classes
args	  - takes class/interface names as args

ex: @Before("execution(public String getName())")
	public void nameAdvice() {
		sysout("advice called before getName() method!");
	}

	@Before("execution(public * com.demo.Circle.get*())")
	public void nameAdvice() {
		sysout("advice called before all getters of Circle class!");
	}
	
	@Before("execution(* * get*(..))")
	public void nameAdvice() {
		sysout("advice called before all getters across app!");
	}
	
	@Before("within(com.demo.Circle)")
	public void nameAdvice() {
		sysout("advice called before all Circle methods!");
	}
	
	@Before("within(com.demo.*)")
	public void nameAdvice() {
		sysout("advice called before all methods of the package!");
	}
	
	@Pointcut("execution(public * com.demo.Circle.get*())") //Pointcut indicates a predicate and dummy method
	public void allGetters(){}
	
	@Pointcut("execution(* com.demo.service.*.*(..))") //all service methods
	public void allGetters(){}
	
	@Pointcut("within(com.demo.Circle)")	//all methods within Circle class
	public void allCircleMethods(){}
	
	@Before("allGetters() && allCircleMethods()")
	public void pointCutAdvice() {
		sysout("advice called before all getter methods of the Circle class!");
	}
	
	//Custom annotations
	@Before("@annotation(com.demo.annotations.Loggable)")	//our custom annotation @Loggable
	public void loggableAdvice() {
		sysout("advice called for all methods annotated with @Loggable...");
	}	
	
	//-------------------------------------------------------------------------------
	
	@Before("execution(* * get*(..))")
	public void nameAdvice(JoinPoint joinPoint) { //get access to the method / object during runtime
		sysout("advice called before all getters across app!");
		joinPoint.toString() //gives the method name which triggered this advice
		joinPoint.getTarget() //get access to the object
	}
	
	//-------------------------------------------------------
	
	@Before("args(String)")	//call the advice when the argument is a string
	public void nameAdvice() {
		sysout("advice called before !");
	}
	
	@Before("args(name)")	//get hold of the argument
	public void nameAdvice(String name) {			//execute advice only if argument is a string
		sysout("advice called before, arg value is : "+name);
	}
	
	//-------------------------------------------------------
	
	@AfterReturning(pointcut="args(name)", returning="returnString")
	public void nameAdvice(String name, String returnString) {		//execute advice only if argument is a string and return type is a string
		sysout("advice called before, arg value is : "+name);
	}
	
	@AfterThrowing(pointcut="args(name)", throwing="ex")
	public void nameAdvice(String name, RuntimeException ex) {		//execute advice only if argument is a string and return type is a string
		sysout("An exception has been thrown : "+ex);
	}
	
	//-----------------------------------------------------------
	
	@Around("allGetters()")
	public void aroundAdvice(ProceedingJoinPoint pJ) {
		Object returnVal= null;
		
		sysout("Before advice...");
		
		try{
			returnVal= pJ.proceed();
			sysout("After returning..."+returnVal);
		}
		catch(Exception e) {
			sysout("After throwing...");
		}
		
		sysout("After finally...");
		
		return returnVal;
	}
	
	//--------------------------------------------------------------
	
	
	
	
	
	
	
	
	
	
	